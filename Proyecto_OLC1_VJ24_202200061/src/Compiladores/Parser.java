
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Compiladores;

import java_cup.runtime.*;
import Abstracto.Instruccion;
import Simbolo.Tipo;
import Simbolo.DatoNativo;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.ArrayList;
import Funciones.*;
import Expresiones.Nativo;
import Expresiones.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\133\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\004\000\002\010\007\000\002\007\011" +
    "\000\002\007\007\000\002\007\015\000\002\007\017\000" +
    "\002\011\006\000\002\011\006\000\002\011\006\000\002" +
    "\023\012\000\002\023\011\000\002\024\010\000\002\024" +
    "\007\000\002\005\005\000\002\005\003\000\002\026\006" +
    "\000\002\026\004\000\002\012\011\000\002\012\015\000" +
    "\002\012\013\000\002\016\014\000\002\016\014\000\002" +
    "\017\011\000\002\022\013\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\013\007\000\002\004\005" +
    "\000\002\004\003\000\002\033\011\000\002\033\007\000" +
    "\002\031\004\000\002\031\003\000\002\032\010\000\002" +
    "\032\010\000\002\021\004\000\002\014\004\000\002\015" +
    "\004\000\002\015\004\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\006\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\005\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\030\003\000\002" +
    "\030\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\351\000\050\003\031\006\025\037\047\040\037\050" +
    "\045\051\006\052\016\053\040\054\007\055\042\056\024" +
    "\057\017\060\013\062\021\063\020\064\034\065\014\066" +
    "\035\067\030\001\002\000\054\002\ufff7\003\ufff7\006\ufff7" +
    "\037\ufff7\040\ufff7\044\ufff7\050\ufff7\051\ufff7\052\ufff7\053" +
    "\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7\060\ufff7\062\ufff7" +
    "\063\ufff7\064\ufff7\065\ufff7\066\ufff7\067\ufff7\001\002\000" +
    "\054\002\ufff2\003\ufff2\006\ufff2\037\ufff2\040\ufff2\044\ufff2" +
    "\050\ufff2\051\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2\056" +
    "\ufff2\057\ufff2\060\ufff2\062\ufff2\063\ufff2\064\ufff2\065\ufff2" +
    "\066\ufff2\067\ufff2\001\002\000\004\006\uffa7\001\002\000" +
    "\012\006\uffab\014\uffab\016\uffab\045\uffab\001\002\000\054" +
    "\002\ufffd\003\ufffd\006\ufffd\037\ufffd\040\ufffd\044\ufffd\050" +
    "\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd" +
    "\057\ufffd\060\ufffd\062\ufffd\063\ufffd\064\ufffd\065\ufffd\066" +
    "\ufffd\067\ufffd\001\002\000\054\002\ufff4\003\ufff4\006\ufff4" +
    "\037\ufff4\040\ufff4\044\ufff4\050\ufff4\051\ufff4\052\ufff4\053" +
    "\ufff4\054\ufff4\055\ufff4\056\ufff4\057\ufff4\060\ufff4\062\ufff4" +
    "\063\ufff4\064\ufff4\065\ufff4\066\ufff4\067\ufff4\001\002\000" +
    "\052\002\000\003\031\006\025\037\047\040\037\050\045" +
    "\051\006\052\016\053\040\054\007\055\042\056\024\057" +
    "\017\060\013\062\021\063\020\064\034\065\014\066\035" +
    "\067\030\001\002\000\012\006\uffad\014\uffad\016\uffad\045" +
    "\uffad\001\002\000\004\014\353\001\002\000\054\002\ufff5" +
    "\003\ufff5\006\ufff5\037\ufff5\040\ufff5\044\ufff5\050\ufff5\051" +
    "\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\057\ufff5" +
    "\060\ufff5\062\ufff5\063\ufff5\064\ufff5\065\ufff5\066\ufff5\067" +
    "\ufff5\001\002\000\012\006\uffae\014\uffae\016\uffae\045\uffae" +
    "\001\002\000\004\041\347\001\002\000\004\041\317\001" +
    "\002\000\026\004\062\005\057\006\065\007\056\010\061" +
    "\011\064\012\070\021\060\036\066\041\067\001\002\000" +
    "\004\002\274\001\002\000\054\002\ufffa\003\ufffa\006\ufffa" +
    "\037\ufffa\040\ufffa\044\ufffa\050\ufffa\051\ufffa\052\ufffa\053" +
    "\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa\060\ufffa\062\ufffa" +
    "\063\ufffa\064\ufffa\065\ufffa\066\ufffa\067\ufffa\001\002\000" +
    "\004\041\261\001\002\000\010\016\250\020\251\021\252" +
    "\001\002\000\054\002\ufffe\003\ufffe\006\ufffe\037\ufffe\040" +
    "\ufffe\044\ufffe\050\ufffe\051\ufffe\052\ufffe\053\ufffe\054\ufffe" +
    "\055\ufffe\056\ufffe\057\ufffe\060\ufffe\062\ufffe\063\ufffe\064" +
    "\ufffe\065\ufffe\066\ufffe\067\ufffe\001\002\000\054\002\ufff9" +
    "\003\ufff9\006\ufff9\037\ufff9\040\ufff9\044\ufff9\050\ufff9\051" +
    "\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9\057\ufff9" +
    "\060\ufff9\062\ufff9\063\ufff9\064\ufff9\065\ufff9\066\ufff9\067" +
    "\ufff9\001\002\000\004\006\236\001\002\000\004\014\235" +
    "\001\002\000\054\002\ufff3\003\ufff3\006\ufff3\037\ufff3\040" +
    "\ufff3\044\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3\054\ufff3" +
    "\055\ufff3\056\ufff3\057\ufff3\060\ufff3\062\ufff3\063\ufff3\064" +
    "\ufff3\065\ufff3\066\ufff3\067\ufff3\001\002\000\054\002\ufffb" +
    "\003\ufffb\006\ufffb\037\ufffb\040\ufffb\044\ufffb\050\ufffb\051" +
    "\ufffb\052\ufffb\053\ufffb\054\ufffb\055\ufffb\056\ufffb\057\ufffb" +
    "\060\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb\066\ufffb\067" +
    "\ufffb\001\002\000\004\014\234\001\002\000\012\006\uffa9" +
    "\014\uffa9\016\uffa9\045\uffa9\001\002\000\004\006\171\001" +
    "\002\000\004\041\163\001\002\000\012\006\uffaa\014\uffaa" +
    "\016\uffaa\045\uffaa\001\002\000\054\002\ufff6\003\ufff6\006" +
    "\ufff6\037\ufff6\040\ufff6\044\ufff6\050\ufff6\051\ufff6\052\ufff6" +
    "\053\ufff6\054\ufff6\055\ufff6\056\ufff6\057\ufff6\060\ufff6\062" +
    "\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6\067\ufff6\001\002" +
    "\000\012\006\uffac\014\uffac\016\uffac\045\uffac\001\002\000" +
    "\054\002\ufffc\003\ufffc\006\ufffc\037\ufffc\040\ufffc\044\ufffc" +
    "\050\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc\055\ufffc\056" +
    "\ufffc\057\ufffc\060\ufffc\062\ufffc\063\ufffc\064\ufffc\065\ufffc" +
    "\066\ufffc\067\ufffc\001\002\000\004\006\143\001\002\000" +
    "\004\006\uffa8\001\002\000\054\002\ufff8\003\ufff8\006\ufff8" +
    "\037\ufff8\040\ufff8\044\ufff8\050\ufff8\051\ufff8\052\ufff8\053" +
    "\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8\060\ufff8\062\ufff8" +
    "\063\ufff8\064\ufff8\065\ufff8\066\ufff8\067\ufff8\001\002\000" +
    "\004\043\050\001\002\000\050\003\031\006\025\037\047" +
    "\040\037\050\045\051\006\052\016\053\040\054\007\055" +
    "\042\056\024\057\017\060\013\062\021\063\020\064\034" +
    "\065\014\066\035\067\030\001\002\000\052\003\031\006" +
    "\025\037\047\040\037\044\053\050\045\051\006\052\016" +
    "\053\040\054\007\055\042\056\024\057\017\060\013\062" +
    "\021\063\020\064\034\065\014\066\035\067\030\001\002" +
    "\000\054\002\uffff\003\uffff\006\uffff\037\uffff\040\uffff\044" +
    "\uffff\050\uffff\051\uffff\052\uffff\053\uffff\054\uffff\055\uffff" +
    "\056\uffff\057\uffff\060\uffff\062\uffff\063\uffff\064\uffff\065" +
    "\uffff\066\uffff\067\uffff\001\002\000\004\040\054\001\002" +
    "\000\004\041\055\001\002\000\026\004\062\005\057\006" +
    "\065\007\056\010\061\011\064\012\070\021\060\036\066" +
    "\041\067\001\002\000\054\014\uffb7\015\uffb7\016\uffb7\017" +
    "\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7" +
    "\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034" +
    "\uffb7\035\uffb7\042\uffb7\043\uffb7\046\uffb7\001\002\000\054" +
    "\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022" +
    "\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8" +
    "\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\042\uffb8\043" +
    "\uffb8\046\uffb8\001\002\000\026\004\062\005\057\006\065" +
    "\007\056\010\061\011\064\012\070\021\060\036\066\041" +
    "\067\001\002\000\054\014\uffb5\015\uffb5\016\uffb5\017\uffb5" +
    "\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026" +
    "\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5" +
    "\035\uffb5\042\uffb5\043\uffb5\046\uffb5\001\002\000\054\014" +
    "\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9" +
    "\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031" +
    "\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\042\uffb9\043\uffb9" +
    "\046\uffb9\001\002\000\042\017\114\020\106\021\103\022" +
    "\110\023\115\024\104\025\107\026\111\027\105\030\101" +
    "\031\113\032\112\033\116\034\100\035\102\042\140\001" +
    "\002\000\054\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4" +
    "\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027" +
    "\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4" +
    "\042\uffb4\043\uffb4\046\uffb4\001\002\000\054\014\uffb3\015" +
    "\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3" +
    "\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032" +
    "\uffb3\033\uffb3\034\uffb3\035\uffb3\042\uffb3\043\uffb3\046\uffb3" +
    "\001\002\000\026\004\062\005\057\006\065\007\056\010" +
    "\061\011\064\012\070\021\060\036\066\041\067\001\002" +
    "\000\034\004\062\005\057\006\065\007\056\010\061\011" +
    "\064\012\070\021\060\036\066\041\067\052\071\054\075" +
    "\060\072\001\002\000\054\014\uffb6\015\uffb6\016\uffb6\017" +
    "\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6" +
    "\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034" +
    "\uffb6\035\uffb6\042\uffb6\043\uffb6\046\uffb6\001\002\000\004" +
    "\042\uffb1\001\002\000\004\042\uffb0\001\002\000\042\017" +
    "\114\020\106\021\103\022\110\023\115\024\104\025\107" +
    "\026\111\027\105\030\101\031\113\032\112\033\116\034" +
    "\100\035\102\042\136\001\002\000\004\042\076\001\002" +
    "\000\004\042\uffaf\001\002\000\026\004\062\005\057\006" +
    "\065\007\056\010\061\011\064\012\070\021\060\036\066" +
    "\041\067\001\002\000\054\014\uffba\015\uffba\016\uffba\017" +
    "\114\020\106\021\103\022\110\023\115\024\104\025\107" +
    "\026\111\027\105\030\101\031\113\032\112\033\116\034" +
    "\100\035\102\042\uffba\043\uffba\046\uffba\001\002\000\026" +
    "\004\062\005\057\006\065\007\056\010\061\011\064\012" +
    "\070\021\060\036\066\041\067\001\002\000\026\004\062" +
    "\005\057\006\065\007\056\010\061\011\064\012\070\021" +
    "\060\036\066\041\067\001\002\000\026\004\062\005\057" +
    "\006\065\007\056\010\061\011\064\012\070\021\060\036" +
    "\066\041\067\001\002\000\026\004\062\005\057\006\065" +
    "\007\056\010\061\011\064\012\070\021\060\036\066\041" +
    "\067\001\002\000\026\004\062\005\057\006\065\007\056" +
    "\010\061\011\064\012\070\021\060\036\066\041\067\001" +
    "\002\000\026\004\062\005\057\006\065\007\056\010\061" +
    "\011\064\012\070\021\060\036\066\041\067\001\002\000" +
    "\026\004\062\005\057\006\065\007\056\010\061\011\064" +
    "\012\070\021\060\036\066\041\067\001\002\000\026\004" +
    "\062\005\057\006\065\007\056\010\061\011\064\012\070" +
    "\021\060\036\066\041\067\001\002\000\026\004\062\005" +
    "\057\006\065\007\056\010\061\011\064\012\070\021\060" +
    "\036\066\041\067\001\002\000\026\004\062\005\057\006" +
    "\065\007\056\010\061\011\064\012\070\021\060\036\066" +
    "\041\067\001\002\000\026\004\062\005\057\006\065\007" +
    "\056\010\061\011\064\012\070\021\060\036\066\041\067" +
    "\001\002\000\026\004\062\005\057\006\065\007\056\010" +
    "\061\011\064\012\070\021\060\036\066\041\067\001\002" +
    "\000\026\004\062\005\057\006\065\007\056\010\061\011" +
    "\064\012\070\021\060\036\066\041\067\001\002\000\026" +
    "\004\062\005\057\006\065\007\056\010\061\011\064\012" +
    "\070\021\060\036\066\041\067\001\002\000\026\004\062" +
    "\005\057\006\065\007\056\010\061\011\064\012\070\021" +
    "\060\036\066\041\067\001\002\000\054\014\uffbd\015\uffbd" +
    "\016\uffbd\017\114\020\106\021\103\022\110\023\115\024" +
    "\104\025\107\026\111\027\105\030\101\031\113\032\112" +
    "\033\uffbd\034\100\035\102\042\uffbd\043\uffbd\046\uffbd\001" +
    "\002\000\054\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6" +
    "\021\uffc6\022\uffc6\023\uffc6\024\104\025\uffc6\026\uffc6\027" +
    "\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6" +
    "\042\uffc6\043\uffc6\046\uffc6\001\002\000\054\014\uffc3\015" +
    "\uffc3\016\uffc3\017\uffc3\020\106\021\103\022\110\023\115" +
    "\024\104\025\107\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032" +
    "\uffc3\033\uffc3\034\uffc3\035\uffc3\042\uffc3\043\uffc3\046\uffc3" +
    "\001\002\000\054\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020" +
    "\106\021\103\022\110\023\115\024\104\025\107\026\uffbf" +
    "\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035" +
    "\uffbf\042\uffbf\043\uffbf\046\uffbf\001\002\000\054\014\uffbe" +
    "\015\uffbe\016\uffbe\017\uffbe\020\106\021\103\022\110\023" +
    "\115\024\104\025\107\026\uffbe\027\uffbe\030\uffbe\031\uffbe" +
    "\032\uffbe\033\uffbe\034\uffbe\035\uffbe\042\uffbe\043\uffbe\046" +
    "\uffbe\001\002\000\054\014\uffc2\015\uffc2\016\uffc2\017\uffc2" +
    "\020\106\021\103\022\110\023\115\024\104\025\107\026" +
    "\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2" +
    "\035\uffc2\042\uffc2\043\uffc2\046\uffc2\001\002\000\054\014" +
    "\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7" +
    "\023\uffc7\024\104\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031" +
    "\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\042\uffc7\043\uffc7" +
    "\046\uffc7\001\002\000\054\014\uffc4\015\uffc4\016\uffc4\017" +
    "\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\104\025\uffc4" +
    "\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034" +
    "\uffc4\035\uffc4\042\uffc4\043\uffc4\046\uffc4\001\002\000\054" +
    "\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022" +
    "\110\023\115\024\104\025\107\026\uffc8\027\uffc8\030\uffc8" +
    "\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\042\uffc8\043" +
    "\uffc8\046\uffc8\001\002\000\054\014\uffc1\015\uffc1\016\uffc1" +
    "\017\uffc1\020\106\021\103\022\110\023\115\024\104\025" +
    "\107\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1" +
    "\034\uffc1\035\uffc1\042\uffc1\043\uffc1\046\uffc1\001\002\000" +
    "\052\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5" +
    "\022\uffc5\023\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031" +
    "\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\042\uffc5\043\uffc5" +
    "\046\uffc5\001\002\000\054\014\uffc9\015\uffc9\016\uffc9\017" +
    "\uffc9\020\uffc9\021\uffc9\022\110\023\115\024\104\025\107" +
    "\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034" +
    "\uffc9\035\uffc9\042\uffc9\043\uffc9\046\uffc9\001\002\000\054" +
    "\014\uffbb\015\uffbb\016\uffbb\017\114\020\106\021\103\022" +
    "\110\023\115\024\104\025\107\026\111\027\105\030\101" +
    "\031\113\032\112\033\uffbb\034\uffbb\035\uffbb\042\uffbb\043" +
    "\uffbb\046\uffbb\001\002\000\054\014\uffc0\015\uffc0\016\uffc0" +
    "\017\uffc0\020\106\021\103\022\110\023\115\024\104\025" +
    "\107\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0" +
    "\034\uffc0\035\uffc0\042\uffc0\043\uffc0\046\uffc0\001\002\000" +
    "\054\014\uffbc\015\uffbc\016\uffbc\017\114\020\106\021\103" +
    "\022\110\023\115\024\104\025\107\026\111\027\105\030" +
    "\101\031\113\032\112\033\uffbc\034\uffbc\035\102\042\uffbc" +
    "\043\uffbc\046\uffbc\001\002\000\054\014\uffb2\015\uffb2\016" +
    "\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2" +
    "\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033" +
    "\uffb2\034\uffb2\035\uffb2\042\uffb2\043\uffb2\046\uffb2\001\002" +
    "\000\054\014\uffca\015\uffca\016\uffca\017\114\020\106\021" +
    "\103\022\110\023\115\024\104\025\107\026\111\027\105" +
    "\030\101\031\113\032\112\033\uffca\034\uffca\035\uffca\042" +
    "\uffca\043\uffca\046\uffca\001\002\000\004\014\141\001\002" +
    "\000\054\002\uffda\003\uffda\006\uffda\037\uffda\040\uffda\044" +
    "\uffda\050\uffda\051\uffda\052\uffda\053\uffda\054\uffda\055\uffda" +
    "\056\uffda\057\uffda\060\uffda\062\uffda\063\uffda\064\uffda\065" +
    "\uffda\066\uffda\067\uffda\001\002\000\054\014\uffcb\015\uffcb" +
    "\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024" +
    "\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb" +
    "\033\uffcb\034\uffcb\035\uffcb\042\uffcb\043\uffcb\046\uffcb\001" +
    "\002\000\004\041\144\001\002\000\020\042\147\052\016" +
    "\053\040\054\007\055\042\060\013\066\035\001\002\000" +
    "\004\006\162\001\002\000\006\015\153\042\154\001\002" +
    "\000\004\043\150\001\002\000\050\003\031\006\025\037" +
    "\047\040\037\050\045\051\006\052\016\053\040\054\007" +
    "\055\042\056\024\057\017\060\013\062\021\063\020\064" +
    "\034\065\014\066\035\067\030\001\002\000\052\003\031" +
    "\006\025\037\047\040\037\044\152\050\045\051\006\052" +
    "\016\053\040\054\007\055\042\056\024\057\017\060\013" +
    "\062\021\063\020\064\034\065\014\066\035\067\030\001" +
    "\002\000\054\002\uffe7\003\uffe7\006\uffe7\037\uffe7\040\uffe7" +
    "\044\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7\055" +
    "\uffe7\056\uffe7\057\uffe7\060\uffe7\062\uffe7\063\uffe7\064\uffe7" +
    "\065\uffe7\066\uffe7\067\uffe7\001\002\000\016\052\016\053" +
    "\040\054\007\055\042\060\013\066\035\001\002\000\004" +
    "\043\155\001\002\000\050\003\031\006\025\037\047\040" +
    "\037\050\045\051\006\052\016\053\040\054\007\055\042" +
    "\056\024\057\017\060\013\062\021\063\020\064\034\065" +
    "\014\066\035\067\030\001\002\000\052\003\031\006\025" +
    "\037\047\040\037\044\157\050\045\051\006\052\016\053" +
    "\040\054\007\055\042\056\024\057\017\060\013\062\021" +
    "\063\020\064\034\065\014\066\035\067\030\001\002\000" +
    "\054\002\uffe8\003\uffe8\006\uffe8\037\uffe8\040\uffe8\044\uffe8" +
    "\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8\056" +
    "\uffe8\057\uffe8\060\uffe8\062\uffe8\063\uffe8\064\uffe8\065\uffe8" +
    "\066\uffe8\067\uffe8\001\002\000\004\006\161\001\002\000" +
    "\006\015\uffe2\042\uffe2\001\002\000\006\015\uffe1\042\uffe1" +
    "\001\002\000\026\004\062\005\057\006\065\007\056\010" +
    "\061\011\064\012\070\021\060\036\066\041\067\001\002" +
    "\000\042\017\114\020\106\021\103\022\110\023\115\024" +
    "\104\025\107\026\111\027\105\030\101\031\113\032\112" +
    "\033\116\034\100\035\102\042\165\001\002\000\004\043" +
    "\166\001\002\000\050\003\031\006\025\037\047\040\037" +
    "\050\045\051\006\052\016\053\040\054\007\055\042\056" +
    "\024\057\017\060\013\062\021\063\020\064\034\065\014" +
    "\066\035\067\030\001\002\000\052\003\031\006\025\037" +
    "\047\040\037\044\170\050\045\051\006\052\016\053\040" +
    "\054\007\055\042\056\024\057\017\060\013\062\021\063" +
    "\020\064\034\065\014\066\035\067\030\001\002\000\054" +
    "\002\uffdb\003\uffdb\006\uffdb\037\uffdb\040\uffdb\044\uffdb\050" +
    "\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb" +
    "\057\uffdb\060\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb\066" +
    "\uffdb\067\uffdb\001\002\000\004\013\172\001\002\000\016" +
    "\052\016\053\040\054\007\055\042\060\013\066\035\001" +
    "\002\000\010\014\174\016\175\045\176\001\002\000\076" +
    "\002\uffee\003\uffee\004\uffee\005\uffee\006\uffee\007\uffee\010" +
    "\uffee\011\uffee\012\uffee\021\uffee\036\uffee\037\uffee\040\uffee" +
    "\041\uffee\044\uffee\050\uffee\051\uffee\052\uffee\053\uffee\054" +
    "\uffee\055\uffee\056\uffee\057\uffee\060\uffee\062\uffee\063\uffee" +
    "\064\uffee\065\uffee\066\uffee\067\uffee\001\002\000\026\004" +
    "\062\005\057\006\065\007\056\010\061\011\064\012\070" +
    "\021\060\036\066\041\067\001\002\000\004\046\177\001" +
    "\002\000\006\016\200\045\201\001\002\000\004\045\223" +
    "\001\002\000\004\046\202\001\002\000\004\016\203\001" +
    "\002\000\004\045\204\001\002\000\004\045\206\001\002" +
    "\000\006\015\213\046\214\001\002\000\026\004\062\005" +
    "\057\006\065\007\056\010\061\011\064\012\070\021\060" +
    "\036\066\041\067\001\002\000\042\015\210\017\114\020" +
    "\106\021\103\022\110\023\115\024\104\025\107\026\111" +
    "\027\105\030\101\031\113\032\112\033\116\034\100\035" +
    "\102\001\002\000\026\004\062\005\057\006\065\007\056" +
    "\010\061\011\064\012\070\021\060\036\066\041\067\001" +
    "\002\000\042\017\114\020\106\021\103\022\110\023\115" +
    "\024\104\025\107\026\111\027\105\030\101\031\113\032" +
    "\112\033\116\034\100\035\102\046\212\001\002\000\006" +
    "\015\uffd2\046\uffd2\001\002\000\004\045\216\001\002\000" +
    "\004\014\215\001\002\000\076\002\uffec\003\uffec\004\uffec" +
    "\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec\021" +
    "\uffec\036\uffec\037\uffec\040\uffec\041\uffec\044\uffec\050\uffec" +
    "\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec\057" +
    "\uffec\060\uffec\062\uffec\063\uffec\064\uffec\065\uffec\066\uffec" +
    "\067\uffec\001\002\000\026\004\062\005\057\006\065\007" +
    "\056\010\061\011\064\012\070\021\060\036\066\041\067" +
    "\001\002\000\042\015\220\017\114\020\106\021\103\022" +
    "\110\023\115\024\104\025\107\026\111\027\105\030\101" +
    "\031\113\032\112\033\116\034\100\035\102\001\002\000" +
    "\026\004\062\005\057\006\065\007\056\010\061\011\064" +
    "\012\070\021\060\036\066\041\067\001\002\000\042\017" +
    "\114\020\106\021\103\022\110\023\115\024\104\025\107" +
    "\026\111\027\105\030\101\031\113\032\112\033\116\034" +
    "\100\035\102\046\222\001\002\000\006\015\uffd3\046\uffd3" +
    "\001\002\000\026\004\062\005\057\006\065\007\056\010" +
    "\061\011\064\012\070\021\060\036\066\041\067\001\002" +
    "\000\044\015\uffd4\017\114\020\106\021\103\022\110\023" +
    "\115\024\104\025\107\026\111\027\105\030\101\031\113" +
    "\032\112\033\116\034\100\035\102\046\uffd4\001\002\000" +
    "\006\015\226\046\227\001\002\000\026\004\062\005\057" +
    "\006\065\007\056\010\061\011\064\012\070\021\060\036" +
    "\066\041\067\001\002\000\004\014\230\001\002\000\076" +
    "\002\uffed\003\uffed\004\uffed\005\uffed\006\uffed\007\uffed\010" +
    "\uffed\011\uffed\012\uffed\021\uffed\036\uffed\037\uffed\040\uffed" +
    "\041\uffed\044\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054" +
    "\uffed\055\uffed\056\uffed\057\uffed\060\uffed\062\uffed\063\uffed" +
    "\064\uffed\065\uffed\066\uffed\067\uffed\001\002\000\044\015" +
    "\uffd5\017\114\020\106\021\103\022\110\023\115\024\104" +
    "\025\107\026\111\027\105\030\101\031\113\032\112\033" +
    "\116\034\100\035\102\046\uffd5\001\002\000\042\014\233" +
    "\017\114\020\106\021\103\022\110\023\115\024\104\025" +
    "\107\026\111\027\105\030\101\031\113\032\112\033\116" +
    "\034\100\035\102\001\002\000\076\002\uffef\003\uffef\004" +
    "\uffef\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef" +
    "\021\uffef\036\uffef\037\uffef\040\uffef\041\uffef\044\uffef\050" +
    "\uffef\051\uffef\052\uffef\053\uffef\054\uffef\055\uffef\056\uffef" +
    "\057\uffef\060\uffef\062\uffef\063\uffef\064\uffef\065\uffef\066" +
    "\uffef\067\uffef\001\002\000\054\002\uffcd\003\uffcd\006\uffcd" +
    "\037\uffcd\040\uffcd\044\uffcd\050\uffcd\051\uffcd\052\uffcd\053" +
    "\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\062\uffcd" +
    "\063\uffcd\064\uffcd\065\uffcd\066\uffcd\067\uffcd\001\002\000" +
    "\054\002\ufff1\003\ufff1\006\ufff1\037\ufff1\040\ufff1\044\ufff1" +
    "\050\ufff1\051\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\056" +
    "\ufff1\057\ufff1\060\ufff1\062\ufff1\063\ufff1\064\ufff1\065\ufff1" +
    "\066\ufff1\067\ufff1\001\002\000\004\041\237\001\002\000" +
    "\030\004\062\005\057\006\065\007\056\010\061\011\064" +
    "\012\070\021\060\036\066\041\067\042\242\001\002\000" +
    "\044\015\uffe3\017\114\020\106\021\103\022\110\023\115" +
    "\024\104\025\107\026\111\027\105\030\101\031\113\032" +
    "\112\033\116\034\100\035\102\042\uffe3\001\002\000\006" +
    "\015\244\042\245\001\002\000\004\014\243\001\002\000" +
    "\054\002\uffe5\003\uffe5\006\uffe5\037\uffe5\040\uffe5\044\uffe5" +
    "\050\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056" +
    "\uffe5\057\uffe5\060\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5" +
    "\066\uffe5\067\uffe5\001\002\000\026\004\062\005\057\006" +
    "\065\007\056\010\061\011\064\012\070\021\060\036\066" +
    "\041\067\001\002\000\004\014\246\001\002\000\054\002" +
    "\uffe6\003\uffe6\006\uffe6\037\uffe6\040\uffe6\044\uffe6\050\uffe6" +
    "\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\057" +
    "\uffe6\060\uffe6\062\uffe6\063\uffe6\064\uffe6\065\uffe6\066\uffe6" +
    "\067\uffe6\001\002\000\044\015\uffe4\017\114\020\106\021" +
    "\103\022\110\023\115\024\104\025\107\026\111\027\105" +
    "\030\101\031\113\032\112\033\116\034\100\035\102\042" +
    "\uffe4\001\002\000\026\004\062\005\057\006\065\007\056" +
    "\010\061\011\064\012\070\021\060\036\066\041\067\001" +
    "\002\000\004\020\255\001\002\000\004\021\253\001\002" +
    "\000\004\014\254\001\002\000\076\002\uffe9\003\uffe9\004" +
    "\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9" +
    "\021\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\044\uffe9\050" +
    "\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9" +
    "\057\uffe9\060\uffe9\062\uffe9\063\uffe9\064\uffe9\065\uffe9\066" +
    "\uffe9\067\uffe9\001\002\000\004\014\256\001\002\000\076" +
    "\002\uffea\003\uffea\004\uffea\005\uffea\006\uffea\007\uffea\010" +
    "\uffea\011\uffea\012\uffea\021\uffea\036\uffea\037\uffea\040\uffea" +
    "\041\uffea\044\uffea\050\uffea\051\uffea\052\uffea\053\uffea\054" +
    "\uffea\055\uffea\056\uffea\057\uffea\060\uffea\062\uffea\063\uffea" +
    "\064\uffea\065\uffea\066\uffea\067\uffea\001\002\000\042\014" +
    "\260\017\114\020\106\021\103\022\110\023\115\024\104" +
    "\025\107\026\111\027\105\030\101\031\113\032\112\033" +
    "\116\034\100\035\102\001\002\000\076\002\uffeb\003\uffeb" +
    "\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012" +
    "\uffeb\021\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\044\uffeb" +
    "\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056" +
    "\uffeb\057\uffeb\060\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb" +
    "\066\uffeb\067\uffeb\001\002\000\026\004\062\005\057\006" +
    "\065\007\056\010\061\011\064\012\070\021\060\036\066" +
    "\041\067\001\002\000\042\017\114\020\106\021\103\022" +
    "\110\023\115\024\104\025\107\026\111\027\105\030\101" +
    "\031\113\032\112\033\116\034\100\035\102\042\263\001" +
    "\002\000\004\043\264\001\002\000\050\003\031\006\025" +
    "\037\047\040\037\050\045\051\006\052\016\053\040\054" +
    "\007\055\042\056\024\057\017\060\013\062\021\063\020" +
    "\064\034\065\014\066\035\067\030\001\002\000\052\003" +
    "\031\006\025\037\047\040\037\044\266\050\045\051\006" +
    "\052\016\053\040\054\007\055\042\056\024\057\017\060" +
    "\013\062\021\063\020\064\034\065\014\066\035\067\030" +
    "\001\002\000\056\002\uffe0\003\uffe0\006\uffe0\037\uffe0\040" +
    "\uffe0\044\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0" +
    "\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061\267\062\uffe0\063" +
    "\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\001\002\000\006" +
    "\043\270\056\024\001\002\000\050\003\031\006\025\037" +
    "\047\040\037\050\045\051\006\052\016\053\040\054\007" +
    "\055\042\056\024\057\017\060\013\062\021\063\020\064" +
    "\034\065\014\066\035\067\030\001\002\000\054\002\uffde" +
    "\003\uffde\006\uffde\037\uffde\040\uffde\044\uffde\050\uffde\051" +
    "\uffde\052\uffde\053\uffde\054\uffde\055\uffde\056\uffde\057\uffde" +
    "\060\uffde\062\uffde\063\uffde\064\uffde\065\uffde\066\uffde\067" +
    "\uffde\001\002\000\052\003\031\006\025\037\047\040\037" +
    "\044\273\050\045\051\006\052\016\053\040\054\007\055" +
    "\042\056\024\057\017\060\013\062\021\063\020\064\034" +
    "\065\014\066\035\067\030\001\002\000\054\002\uffdf\003" +
    "\uffdf\006\uffdf\037\uffdf\040\uffdf\044\uffdf\050\uffdf\051\uffdf" +
    "\052\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf\060" +
    "\uffdf\062\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf\067\uffdf" +
    "\001\002\000\004\002\001\001\002\000\042\017\114\020" +
    "\106\021\103\022\110\023\115\024\104\025\107\026\111" +
    "\027\105\030\101\031\113\032\112\033\116\034\100\035" +
    "\102\043\276\001\002\000\030\004\062\005\057\006\065" +
    "\007\056\010\061\011\064\012\070\021\060\036\066\041" +
    "\067\047\277\001\002\000\004\016\312\001\002\000\032" +
    "\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012" +
    "\uffd0\021\uffd0\036\uffd0\041\uffd0\044\uffd0\047\uffd0\001\002" +
    "\000\032\004\062\005\057\006\065\007\056\010\061\011" +
    "\064\012\070\021\060\036\066\041\067\044\311\047\277" +
    "\001\002\000\042\016\303\017\114\020\106\021\103\022" +
    "\110\023\115\024\104\025\107\026\111\027\105\030\101" +
    "\031\113\032\112\033\116\034\100\035\102\001\002\000" +
    "\004\031\304\001\002\000\004\043\305\001\002\000\050" +
    "\003\031\006\025\037\047\040\037\050\045\051\006\052" +
    "\016\053\040\054\007\055\042\056\024\057\017\060\013" +
    "\062\021\063\020\064\034\065\014\066\035\067\030\001" +
    "\002\000\052\003\031\006\025\037\047\040\037\044\307" +
    "\050\045\051\006\052\016\053\040\054\007\055\042\056" +
    "\024\057\017\060\013\062\021\063\020\064\034\065\014" +
    "\066\035\067\030\001\002\000\032\004\uffcf\005\uffcf\006" +
    "\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\021\uffcf\036\uffcf" +
    "\041\uffcf\044\uffcf\047\uffcf\001\002\000\032\004\uffd1\005" +
    "\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\021\uffd1" +
    "\036\uffd1\041\uffd1\044\uffd1\047\uffd1\001\002\000\054\002" +
    "\uffd6\003\uffd6\006\uffd6\037\uffd6\040\uffd6\044\uffd6\050\uffd6" +
    "\051\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\057" +
    "\uffd6\060\uffd6\062\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6" +
    "\067\uffd6\001\002\000\004\031\313\001\002\000\004\043" +
    "\314\001\002\000\050\003\031\006\025\037\047\040\037" +
    "\050\045\051\006\052\016\053\040\054\007\055\042\056" +
    "\024\057\017\060\013\062\021\063\020\064\034\065\014" +
    "\066\035\067\030\001\002\000\052\003\031\006\025\037" +
    "\047\040\037\044\316\050\045\051\006\052\016\053\040" +
    "\054\007\055\042\056\024\057\017\060\013\062\021\063" +
    "\020\064\034\065\014\066\035\067\030\001\002\000\032" +
    "\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce\012" +
    "\uffce\021\uffce\036\uffce\041\uffce\044\uffce\047\uffce\001\002" +
    "\000\010\006\025\050\045\051\006\001\002\000\026\004" +
    "\062\005\057\006\065\007\056\010\061\011\064\012\070" +
    "\021\060\036\066\041\067\001\002\000\026\004\062\005" +
    "\057\006\065\007\056\010\061\011\064\012\070\021\060" +
    "\036\066\041\067\001\002\000\042\014\323\017\114\020" +
    "\106\021\103\022\110\023\115\024\104\025\107\026\111" +
    "\027\105\030\101\031\113\032\112\033\116\034\100\035" +
    "\102\001\002\000\004\006\324\001\002\000\010\016\332" +
    "\020\333\021\334\001\002\000\004\042\326\001\002\000" +
    "\004\043\327\001\002\000\050\003\031\006\025\037\047" +
    "\040\037\050\045\051\006\052\016\053\040\054\007\055" +
    "\042\056\024\057\017\060\013\062\021\063\020\064\034" +
    "\065\014\066\035\067\030\001\002\000\052\003\031\006" +
    "\025\037\047\040\037\044\331\050\045\051\006\052\016" +
    "\053\040\054\007\055\042\056\024\057\017\060\013\062" +
    "\021\063\020\064\034\065\014\066\035\067\030\001\002" +
    "\000\054\002\uffdd\003\uffdd\006\uffdd\037\uffdd\040\uffdd\044" +
    "\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd" +
    "\056\uffdd\057\uffdd\060\uffdd\062\uffdd\063\uffdd\064\uffdd\065" +
    "\uffdd\066\uffdd\067\uffdd\001\002\000\026\004\062\005\057" +
    "\006\065\007\056\010\061\011\064\012\070\021\060\036" +
    "\066\041\067\001\002\000\004\020\336\001\002\000\004" +
    "\021\335\001\002\000\004\042\uffd7\001\002\000\004\042" +
    "\uffd8\001\002\000\042\017\114\020\106\021\103\022\110" +
    "\023\115\024\104\025\107\026\111\027\105\030\101\031" +
    "\113\032\112\033\116\034\100\035\102\042\uffd9\001\002" +
    "\000\042\014\341\017\114\020\106\021\103\022\110\023" +
    "\115\024\104\025\107\026\111\027\105\030\101\031\113" +
    "\032\112\033\116\034\100\035\102\001\002\000\004\006" +
    "\324\001\002\000\004\042\343\001\002\000\004\043\344" +
    "\001\002\000\050\003\031\006\025\037\047\040\037\050" +
    "\045\051\006\052\016\053\040\054\007\055\042\056\024" +
    "\057\017\060\013\062\021\063\020\064\034\065\014\066" +
    "\035\067\030\001\002\000\052\003\031\006\025\037\047" +
    "\040\037\044\346\050\045\051\006\052\016\053\040\054" +
    "\007\055\042\056\024\057\017\060\013\062\021\063\020" +
    "\064\034\065\014\066\035\067\030\001\002\000\054\002" +
    "\uffdc\003\uffdc\006\uffdc\037\uffdc\040\uffdc\044\uffdc\050\uffdc" +
    "\051\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057" +
    "\uffdc\060\uffdc\062\uffdc\063\uffdc\064\uffdc\065\uffdc\066\uffdc" +
    "\067\uffdc\001\002\000\026\004\062\005\057\006\065\007" +
    "\056\010\061\011\064\012\070\021\060\036\066\041\067" +
    "\001\002\000\042\017\114\020\106\021\103\022\110\023" +
    "\115\024\104\025\107\026\111\027\105\030\101\031\113" +
    "\032\112\033\116\034\100\035\102\042\351\001\002\000" +
    "\004\014\352\001\002\000\054\002\ufff0\003\ufff0\006\ufff0" +
    "\037\ufff0\040\ufff0\044\ufff0\050\ufff0\051\ufff0\052\ufff0\053" +
    "\ufff0\054\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0\062\ufff0" +
    "\063\ufff0\064\ufff0\065\ufff0\066\ufff0\067\ufff0\001\002\000" +
    "\054\002\uffcc\003\uffcc\006\uffcc\037\uffcc\040\uffcc\044\uffcc" +
    "\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc\056" +
    "\uffcc\057\uffcc\060\uffcc\062\uffcc\063\uffcc\064\uffcc\065\uffcc" +
    "\066\uffcc\067\uffcc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\351\000\044\002\021\003\011\006\025\007\042\010" +
    "\007\011\032\012\022\013\026\014\010\016\045\017\003" +
    "\021\040\022\014\023\031\024\004\027\043\030\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\006\051\007\042\010\007\011\032\012\022\013\026" +
    "\014\010\016\045\017\003\021\040\022\014\023\031\024" +
    "\004\027\043\030\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\274\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\003\050\006" +
    "\025\007\042\010\007\011\032\012\022\013\026\014\010" +
    "\016\045\017\003\021\040\022\014\023\031\024\004\027" +
    "\043\030\035\001\001\000\040\006\051\007\042\010\007" +
    "\011\032\012\022\013\026\014\010\016\045\017\003\021" +
    "\040\022\014\023\031\024\004\027\043\030\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\136\001\001\000\006\015\072\025\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\076\001\001\000\002\001\001\000\004\015\134" +
    "\001\001\000\004\015\133\001\001\000\004\015\132\001" +
    "\001\000\004\015\131\001\001\000\004\015\130\001\001" +
    "\000\004\015\127\001\001\000\004\015\126\001\001\000" +
    "\004\015\125\001\001\000\004\015\124\001\001\000\004" +
    "\015\123\001\001\000\004\015\122\001\001\000\004\015" +
    "\121\001\001\000\004\015\120\001\001\000\004\015\117" +
    "\001\001\000\004\015\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\026\145\027\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\003\150\006" +
    "\025\007\042\010\007\011\032\012\022\013\026\014\010" +
    "\016\045\017\003\021\040\022\014\023\031\024\004\027" +
    "\043\030\035\001\001\000\040\006\051\007\042\010\007" +
    "\011\032\012\022\013\026\014\010\016\045\017\003\021" +
    "\040\022\014\023\031\024\004\027\043\030\035\001\001" +
    "\000\002\001\001\000\004\027\157\001\001\000\002\001" +
    "\001\000\042\003\155\006\025\007\042\010\007\011\032" +
    "\012\022\013\026\014\010\016\045\017\003\021\040\022" +
    "\014\023\031\024\004\027\043\030\035\001\001\000\040" +
    "\006\051\007\042\010\007\011\032\012\022\013\026\014" +
    "\010\016\045\017\003\021\040\022\014\023\031\024\004" +
    "\027\043\030\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\003" +
    "\166\006\025\007\042\010\007\011\032\012\022\013\026" +
    "\014\010\016\045\017\003\021\040\022\014\023\031\024" +
    "\004\027\043\030\035\001\001\000\040\006\051\007\042" +
    "\010\007\011\032\012\022\013\026\014\010\016\045\017" +
    "\003\021\040\022\014\023\031\024\004\027\043\030\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\172\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\231\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\204\001\001\000\002\001\001\000" +
    "\004\015\206\001\001\000\002\001\001\000\004\015\210" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\216" +
    "\001\001\000\002\001\001\000\004\015\220\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\224\015\223" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\230\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\240" +
    "\015\237\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\246\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\256\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\261\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\003\264\006\025\007\042\010\007\011\032\012\022" +
    "\013\026\014\010\016\045\017\003\021\040\022\014\023" +
    "\031\024\004\027\043\030\035\001\001\000\040\006\051" +
    "\007\042\010\007\011\032\012\022\013\026\014\010\016" +
    "\045\017\003\021\040\022\014\023\031\024\004\027\043" +
    "\030\035\001\001\000\002\001\001\000\004\012\270\001" +
    "\001\000\042\003\271\006\025\007\042\010\007\011\032" +
    "\012\022\013\026\014\010\016\045\017\003\021\040\022" +
    "\014\023\031\024\004\027\043\030\035\001\001\000\002" +
    "\001\001\000\040\006\051\007\042\010\007\011\032\012" +
    "\022\013\026\014\010\016\045\017\003\021\040\022\014" +
    "\023\031\024\004\027\043\030\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\015\301" +
    "\031\300\032\277\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\301\032\307\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\003\305\006" +
    "\025\007\042\010\007\011\032\012\022\013\026\014\010" +
    "\016\045\017\003\021\040\022\014\023\031\024\004\027" +
    "\043\030\035\001\001\000\040\006\051\007\042\010\007" +
    "\011\032\012\022\013\026\014\010\016\045\017\003\021" +
    "\040\022\014\023\031\024\004\027\043\030\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\003\314\006\025" +
    "\007\042\010\007\011\032\012\022\013\026\014\010\016" +
    "\045\017\003\021\040\022\014\023\031\024\004\027\043" +
    "\030\035\001\001\000\040\006\051\007\042\010\007\011" +
    "\032\012\022\013\026\014\010\016\045\017\003\021\040" +
    "\022\014\023\031\024\004\027\043\030\035\001\001\000" +
    "\002\001\001\000\010\007\317\011\320\030\035\001\001" +
    "\000\004\015\337\001\001\000\004\015\321\001\001\000" +
    "\002\001\001\000\004\020\324\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\003\327\006" +
    "\025\007\042\010\007\011\032\012\022\013\026\014\010" +
    "\016\045\017\003\021\040\022\014\023\031\024\004\027" +
    "\043\030\035\001\001\000\040\006\051\007\042\010\007" +
    "\011\032\012\022\013\026\014\010\016\045\017\003\021" +
    "\040\022\014\023\031\024\004\027\043\030\035\001\001" +
    "\000\002\001\001\000\004\015\336\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\341\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\003\344" +
    "\006\025\007\042\010\007\011\032\012\022\013\026\014" +
    "\010\016\045\017\003\021\040\022\014\023\031\024\004" +
    "\027\043\030\035\001\001\000\040\006\051\007\042\010" +
    "\007\011\032\012\022\013\026\014\010\016\045\017\003" +
    "\021\040\022\014\023\031\024\004\027\043\030\035\001" +
    "\001\000\002\001\001\000\004\015\347\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public LinkedList<Errores> listaErrores = new LinkedList<>();

    public void syntax_error(Symbol s){

            listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error(Symbol s){

            listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= instrucciones 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a; RESULT.add(b);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= imprimir 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= declaracion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= modificacion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= sif 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= smatch 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= sfor 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= swhile 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= sbreak 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= sdowhile 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= scontinue 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= metodo 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= sstartwith 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= error PUNTOYCOMA 
            {
              Instruccion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // imprimir ::= PRINTLN PARENTESIS_A expresion PARENTESIS_C PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new FuncPrint(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimir",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracion ::= mutabilidad ID DOSPUNTOS tipos IGUAL expresion PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		TipoMutabilidad a = (TipoMutabilidad)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DeclaracionVar(b, d, a, c, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracion ::= mutabilidad ID DOSPUNTOS tipos PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		TipoMutabilidad a = (TipoMutabilidad)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DeclaracionVar(b, null, a, c, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaracion ::= mutabilidad ID DOSPUNTOS tipos CORCHETE_A CORCHETE_C IGUAL CORCHETE_A listaexpresiones CORCHETE_C PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		TipoMutabilidad a = (TipoMutabilidad)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new DeclaracionArr(a, b, d, new LinkedList<ArrayList<Instruccion>>(), c, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaracion ::= mutabilidad ID DOSPUNTOS tipos CORCHETE_A CORCHETE_C CORCHETE_A CORCHETE_C IGUAL CORCHETE_A listaexp2D CORCHETE_C PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		TipoMutabilidad a = (TipoMutabilidad)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<ArrayList<Instruccion>> d = (LinkedList<ArrayList<Instruccion>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new DeclaracionArr(a, b, new LinkedList<Instruccion>(), d, c, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // modificacion ::= ID IGUAL expresion PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ModificacionVar(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // modificacion ::= ID SUMA SUMA PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new ModificacionVar(a, ModificadoresVar.AUMENTO, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // modificacion ::= ID MENOS MENOS PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new ModificacionVar(a, ModificadoresVar.DECREMENTO, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // metodo ::= tipos ID PARENTESIS_A params PARENTESIS_C LLAVE_A instrucciones LLAVE_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<HashMap> c = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Metodos(b, c, d, a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodo",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // metodo ::= tipos ID PARENTESIS_A PARENTESIS_C LLAVE_A instrucciones LLAVE_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Metodos(b, new LinkedList<HashMap>(), c, a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodo",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sstartwith ::= STARTWITH ID PARENTESIS_A listaparams PARENTESIS_C PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new StartWith(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sstartwith",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sstartwith ::= STARTWITH ID PARENTESIS_A PARENTESIS_C PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new StartWith(a, new LinkedList<Instruccion>(), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sstartwith",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // listaparams ::= listaparams COMA expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaparams",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // listaparams ::= expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Instruccion>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaparams",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // params ::= params COMA tipos ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; var hm = new HashMap<String, Object>(); hm.put("id", c); hm.put("tipo", b); RESULT.add(hm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // params ::= tipos ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<HashMap>(); var hm2 = new HashMap<String, Object>(); hm2.put("id", b); hm2.put("tipo", a); RESULT.add(hm2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sif ::= IF PARENTESIS_A expresion PARENTESIS_C LLAVE_A instrucciones LLAVE_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FuncIf(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sif",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sif ::= IF PARENTESIS_A expresion PARENTESIS_C LLAVE_A instrucciones LLAVE_C ELSE LLAVE_A instrucciones LLAVE_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FuncIf(a, b, c, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sif",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sif ::= IF PARENTESIS_A expresion PARENTESIS_C LLAVE_A instrucciones LLAVE_C ELSE sif 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FuncElseIf(a, c, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sif",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sfor ::= FOR PARENTESIS_A modificacion expresion PUNTOYCOMA act_for PARENTESIS_C LLAVE_A instrucciones LLAVE_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FuncFor(a, b, c, d, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sfor",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sfor ::= FOR PARENTESIS_A declaracion expresion PUNTOYCOMA act_for PARENTESIS_C LLAVE_A instrucciones LLAVE_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FuncFor(a, b, c, d, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sfor",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // swhile ::= WHILE PARENTESIS_A expresion PARENTESIS_C LLAVE_A instrucciones LLAVE_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FuncWhile(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("swhile",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sdowhile ::= DO LLAVE_A instrucciones LLAVE_C WHILE PARENTESIS_A expresion PARENTESIS_C PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new FuncDoWhile(b, a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sdowhile",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // act_for ::= ID IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ModificacionVar(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("act_for",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // act_for ::= ID SUMA SUMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new ModificacionVar(a, ModificadoresVar.AUMENTO, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("act_for",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // act_for ::= ID MENOS MENOS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new ModificacionVar(a, ModificadoresVar.DECREMENTO, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("act_for",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // smatch ::= MATCH expresion LLAVE_A casos LLAVE_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<CasosMatch> b = (LinkedList<CasosMatch>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FuncMatch(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("smatch",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // listaexpresiones ::= listaexpresiones COMA expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaexpresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // listaexpresiones ::= expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaexpresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // listaexp2D ::= listaexp2D COMA CORCHETE_A expresion COMA expresion CORCHETE_C 
            {
              LinkedList<ArrayList<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		LinkedList<ArrayList<Instruccion>> a = (LinkedList<ArrayList<Instruccion>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
                                                                                           var arr2D1 = new ArrayList<Instruccion>();
                                                                                           arr2D1.add(b);
                                                                                           arr2D1.add(c);
                                                                                           RESULT.add(arr2D1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaexp2D",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // listaexp2D ::= CORCHETE_A expresion COMA expresion CORCHETE_C 
            {
              LinkedList<ArrayList<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new LinkedList<ArrayList<Instruccion>>(); 
                                                                                           var arr2D2 = new ArrayList<Instruccion>();
                                                                                           arr2D2.add(a);
                                                                                           arr2D2.add(b);
                                                                                           RESULT.add(arr2D2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaexp2D",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // casos ::= casos caso 
            {
              LinkedList<CasosMatch> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<CasosMatch> a = (LinkedList<CasosMatch>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CasosMatch b = (CasosMatch)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casos",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // casos ::= caso 
            {
              LinkedList<CasosMatch> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CasosMatch a = (CasosMatch)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casos",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // caso ::= expresion IGUAL MAYOR LLAVE_A instrucciones LLAVE_C 
            {
              CasosMatch RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CasosMatch(a, b, true, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // caso ::= GUIONBAJO IGUAL MAYOR LLAVE_A instrucciones LLAVE_C 
            {
              CasosMatch RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CasosMatch(null, a, false, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sbreak ::= BREAK PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Break(aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sbreak",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // scontinue ::= CONTINUE PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Continue(aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("scontinue",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= MENOS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= NOT expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Logicas(a, OperadoresLogicos.NOT, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= expresion MENOS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= expresion SUMA expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion ::= expresion POR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion ::= expresion DIVISION expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion ::= expresion POTENCIA expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion ::= expresion MOD expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MODULO, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion ::= expresion DOSIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUALACION, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion ::= expresion DIFERENCIA expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.DIFERENCIA, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion ::= expresion MENOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MENORQUE, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion ::= expresion MENORIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MENORIGUAL, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion ::= expresion MAYOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYORQUE, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion ::= expresion MAYORIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYORIGUAL, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion ::= expresion OR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Logicas(a, b, OperadoresLogicos.OR, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion ::= expresion AND expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Logicas(a, b, OperadoresLogicos.AND, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion ::= expresion XOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Logicas(a, b, OperadoresLogicos.XOR, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion ::= PARENTESIS_A tiposCasteo PARENTESIS_C expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DatoNativo a = (DatoNativo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Casteo(b, a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Nativo(Integer.parseInt(a), new Tipo(DatoNativo.ENTERO), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Nativo(new Double(a), new Tipo(DatoNativo.DECIMAL), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Nativo(a, new Tipo(DatoNativo.CADENA), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		char a = (char)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Nativo(a, new Tipo(DatoNativo.CARACTER), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion ::= TRUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Nativo(true, new Tipo(DatoNativo.BOOLEANO), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion ::= FALSE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Nativo(false, new Tipo(DatoNativo.BOOLEANO), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AccesoVariable(a, aleft, aright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion ::= PARENTESIS_A expresion PARENTESIS_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // tiposCasteo ::= INT 
            {
              DatoNativo RESULT =null;
		   RESULT=DatoNativo.ENTERO;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tiposCasteo",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // tiposCasteo ::= DOUBLE 
            {
              DatoNativo RESULT =null;
		   RESULT=DatoNativo.DECIMAL;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tiposCasteo",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // tiposCasteo ::= CHAR 
            {
              DatoNativo RESULT =null;
		   RESULT=DatoNativo.CARACTER;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tiposCasteo",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // tipos ::= INT 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(DatoNativo.ENTERO);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // tipos ::= DOUBLE 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(DatoNativo.DECIMAL);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // tipos ::= STRING 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(DatoNativo.CADENA);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // tipos ::= CHAR 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(DatoNativo.CARACTER);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // tipos ::= BOOLEANO 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(DatoNativo.BOOLEANO);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // tipos ::= VOID 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(DatoNativo.VOID);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // mutabilidad ::= VAR 
            {
              TipoMutabilidad RESULT =null;
		   RESULT = TipoMutabilidad.VAR;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mutabilidad",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // mutabilidad ::= CONST 
            {
              TipoMutabilidad RESULT =null;
		   RESULT = TipoMutabilidad.CONST;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mutabilidad",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
