
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Compiladores;

import java_cup.runtime.*;
import Abstracto.Instruccion;
import Simbolo.Tipo;
import Simbolo.DatoNativo;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.ArrayList;
import Funciones.*;
import Expresiones.Nativo;
import Expresiones.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\203\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\004\000\002\010\007\000\002\007\011\000\002" +
    "\007\007\000\002\007\015\000\002\007\017\000\002\007" +
    "\015\000\002\011\006\000\002\011\011\000\002\011\014" +
    "\000\002\011\010\000\002\011\012\000\002\011\006\000" +
    "\002\011\006\000\002\025\012\000\002\025\011\000\002" +
    "\025\012\000\002\025\011\000\002\030\010\000\002\031" +
    "\013\000\002\031\005\000\002\026\010\000\002\026\007" +
    "\000\002\027\007\000\002\027\006\000\002\005\005\000" +
    "\002\005\003\000\002\035\005\000\002\035\004\000\002" +
    "\045\005\000\002\045\005\000\002\043\005\000\002\043" +
    "\003\000\002\044\005\000\002\044\005\000\002\034\006" +
    "\000\002\034\004\000\002\012\011\000\002\012\015\000" +
    "\002\012\013\000\002\016\014\000\002\016\014\000\002" +
    "\017\011\000\002\022\013\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\013\007\000\002\023\011" +
    "\000\002\004\005\000\002\004\003\000\002\042\007\000" +
    "\002\042\005\000\002\024\011\000\002\040\004\000\002" +
    "\040\003\000\002\041\010\000\002\041\010\000\002\021" +
    "\004\000\002\014\004\000\002\032\005\000\002\032\004" +
    "\000\002\015\004\000\002\015\004\000\002\015\005\000" +
    "\002\015\006\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\006\000\002\015\005\000\002\015" +
    "\007\000\002\015\006\000\002\015\011\000\002\015\010" +
    "\000\002\015\006\000\002\015\006\000\002\015\006\000" +
    "\002\015\010\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\037\003\000\002\037\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0173\000\060\003\036\006\031\040\061\041\045\042" +
    "\053\046\023\053\056\054\007\055\020\056\050\057\010" +
    "\060\052\061\030\062\021\063\014\065\024\066\022\067" +
    "\042\070\015\071\043\072\035\074\046\102\034\001\002" +
    "\000\064\002\ufff7\003\ufff7\006\ufff7\040\ufff7\041\ufff7\042" +
    "\ufff7\046\ufff7\047\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7" +
    "\057\ufff7\060\ufff7\061\ufff7\062\ufff7\063\ufff7\065\ufff7\066" +
    "\ufff7\067\ufff7\070\ufff7\071\ufff7\072\ufff7\074\ufff7\102\ufff7" +
    "\001\002\000\064\002\ufff0\003\ufff0\006\ufff0\040\ufff0\041" +
    "\ufff0\042\ufff0\046\ufff0\047\ufff0\053\ufff0\054\ufff0\055\ufff0" +
    "\056\ufff0\057\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0\065" +
    "\ufff0\066\ufff0\067\ufff0\070\ufff0\071\ufff0\072\ufff0\074\ufff0" +
    "\102\ufff0\001\002\000\064\002\ufff1\003\ufff1\006\ufff1\040" +
    "\ufff1\041\ufff1\042\ufff1\046\ufff1\047\ufff1\053\ufff1\054\ufff1" +
    "\055\ufff1\056\ufff1\057\ufff1\060\ufff1\061\ufff1\062\ufff1\063" +
    "\ufff1\065\ufff1\066\ufff1\067\ufff1\070\ufff1\071\ufff1\072\ufff1" +
    "\074\ufff1\102\ufff1\001\002\000\004\006\uff7f\001\002\000" +
    "\014\006\uff82\014\uff82\017\uff82\032\uff82\050\uff82\001\002" +
    "\000\064\002\ufffd\003\ufffd\006\ufffd\040\ufffd\041\ufffd\042" +
    "\ufffd\046\ufffd\047\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd" +
    "\057\ufffd\060\ufffd\061\ufffd\062\ufffd\063\ufffd\065\ufffd\066" +
    "\ufffd\067\ufffd\070\ufffd\071\ufffd\072\ufffd\074\ufffd\102\ufffd" +
    "\001\002\000\064\002\ufff4\003\ufff4\006\ufff4\040\ufff4\041" +
    "\ufff4\042\ufff4\046\ufff4\047\ufff4\053\ufff4\054\ufff4\055\ufff4" +
    "\056\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\065" +
    "\ufff4\066\ufff4\067\ufff4\070\ufff4\071\ufff4\072\ufff4\074\ufff4" +
    "\102\ufff4\001\002\000\062\002\000\003\036\006\031\040" +
    "\061\041\045\042\053\046\023\053\056\054\007\055\020" +
    "\056\050\057\010\060\052\061\030\062\021\063\014\065" +
    "\024\066\022\067\042\070\015\071\043\072\035\074\046" +
    "\102\034\001\002\000\014\006\uff84\014\uff84\017\uff84\032" +
    "\uff84\050\uff84\001\002\000\004\014\u0175\001\002\000\064" +
    "\002\ufff3\003\ufff3\006\ufff3\040\ufff3\041\ufff3\042\ufff3\046" +
    "\ufff3\047\ufff3\053\ufff3\054\ufff3\055\ufff3\056\ufff3\057\ufff3" +
    "\060\ufff3\061\ufff3\062\ufff3\063\ufff3\065\ufff3\066\ufff3\067" +
    "\ufff3\070\ufff3\071\ufff3\072\ufff3\074\ufff3\102\ufff3\001\002" +
    "\000\064\002\ufff5\003\ufff5\006\ufff5\040\ufff5\041\ufff5\042" +
    "\ufff5\046\ufff5\047\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5" +
    "\057\ufff5\060\ufff5\061\ufff5\062\ufff5\063\ufff5\065\ufff5\066" +
    "\ufff5\067\ufff5\070\ufff5\071\ufff5\072\ufff5\074\ufff5\102\ufff5" +
    "\001\002\000\014\006\uff85\014\uff85\017\uff85\032\uff85\050" +
    "\uff85\001\002\000\004\044\u0171\001\002\000\004\044\u0154" +
    "\001\002\000\004\006\341\001\002\000\034\004\075\005" +
    "\072\006\102\007\070\010\076\011\100\012\105\022\074" +
    "\037\103\043\071\044\104\077\101\100\073\001\002\000" +
    "\004\002\u013f\001\002\000\064\002\uffee\003\uffee\006\uffee" +
    "\040\uffee\041\uffee\042\uffee\046\uffee\047\uffee\053\uffee\054" +
    "\uffee\055\uffee\056\uffee\057\uffee\060\uffee\061\uffee\062\uffee" +
    "\063\uffee\065\uffee\066\uffee\067\uffee\070\uffee\071\uffee\072" +
    "\uffee\074\uffee\102\uffee\001\002\000\064\002\ufffa\003\ufffa" +
    "\006\ufffa\040\ufffa\041\ufffa\042\ufffa\046\ufffa\047\ufffa\053" +
    "\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa\060\ufffa\061\ufffa" +
    "\062\ufffa\063\ufffa\065\ufffa\066\ufffa\067\ufffa\070\ufffa\071" +
    "\ufffa\072\ufffa\074\ufffa\102\ufffa\001\002\000\004\044\u0134" +
    "\001\002\000\016\016\u0105\017\u0106\021\u0107\022\u0108\044" +
    "\u0109\050\u010a\001\002\000\064\002\ufffe\003\ufffe\006\ufffe" +
    "\040\ufffe\041\ufffe\042\ufffe\046\ufffe\047\ufffe\053\ufffe\054" +
    "\ufffe\055\ufffe\056\ufffe\057\ufffe\060\ufffe\061\ufffe\062\ufffe" +
    "\063\ufffe\065\ufffe\066\ufffe\067\ufffe\070\ufffe\071\ufffe\072" +
    "\ufffe\074\ufffe\102\ufffe\001\002\000\064\002\ufff9\003\ufff9" +
    "\006\ufff9\040\ufff9\041\ufff9\042\ufff9\046\ufff9\047\ufff9\053" +
    "\ufff9\054\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9\061\ufff9" +
    "\062\ufff9\063\ufff9\065\ufff9\066\ufff9\067\ufff9\070\ufff9\071" +
    "\ufff9\072\ufff9\074\ufff9\102\ufff9\001\002\000\036\004\075" +
    "\005\072\006\102\007\070\010\076\011\100\012\105\014" +
    "\u0103\022\074\037\103\043\071\044\104\077\101\100\073" +
    "\001\002\000\004\006\373\001\002\000\004\014\372\001" +
    "\002\000\064\002\uffed\003\uffed\006\uffed\040\uffed\041\uffed" +
    "\042\uffed\046\uffed\047\uffed\053\uffed\054\uffed\055\uffed\056" +
    "\uffed\057\uffed\060\uffed\061\uffed\062\uffed\063\uffed\065\uffed" +
    "\066\uffed\067\uffed\070\uffed\071\uffed\072\uffed\074\uffed\102" +
    "\uffed\001\002\000\064\002\ufff2\003\ufff2\006\ufff2\040\ufff2" +
    "\041\ufff2\042\ufff2\046\ufff2\047\ufff2\053\ufff2\054\ufff2\055" +
    "\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2" +
    "\065\ufff2\066\ufff2\067\ufff2\070\ufff2\071\ufff2\072\ufff2\074" +
    "\ufff2\102\ufff2\001\002\000\064\002\ufffb\003\ufffb\006\ufffb" +
    "\040\ufffb\041\ufffb\042\ufffb\046\ufffb\047\ufffb\053\ufffb\054" +
    "\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb" +
    "\063\ufffb\065\ufffb\066\ufffb\067\ufffb\070\ufffb\071\ufffb\072" +
    "\ufffb\074\ufffb\102\ufffb\001\002\000\004\014\371\001\002" +
    "\000\004\006\356\001\002\000\004\006\277\001\002\000" +
    "\004\044\271\001\002\000\004\030\257\001\002\000\064" +
    "\002\uffef\003\uffef\006\uffef\040\uffef\041\uffef\042\uffef\046" +
    "\uffef\047\uffef\053\uffef\054\uffef\055\uffef\056\uffef\057\uffef" +
    "\060\uffef\061\uffef\062\uffef\063\uffef\065\uffef\066\uffef\067" +
    "\uffef\070\uffef\071\uffef\072\uffef\074\uffef\102\uffef\001\002" +
    "\000\014\006\uff81\014\uff81\017\uff81\032\uff81\050\uff81\001" +
    "\002\000\064\002\ufff6\003\ufff6\006\ufff6\040\ufff6\041\ufff6" +
    "\042\ufff6\046\ufff6\047\ufff6\053\ufff6\054\ufff6\055\ufff6\056" +
    "\ufff6\057\ufff6\060\ufff6\061\ufff6\062\ufff6\063\ufff6\065\ufff6" +
    "\066\ufff6\067\ufff6\070\ufff6\071\ufff6\072\ufff6\074\ufff6\102" +
    "\ufff6\001\002\000\014\006\uff83\014\uff83\017\uff83\032\uff83" +
    "\050\uff83\001\002\000\004\046\242\001\002\000\064\002" +
    "\ufffc\003\ufffc\006\ufffc\040\ufffc\041\ufffc\042\ufffc\046\ufffc" +
    "\047\ufffc\053\ufffc\054\ufffc\055\ufffc\056\ufffc\057\ufffc\060" +
    "\ufffc\061\ufffc\062\ufffc\063\ufffc\065\ufffc\066\ufffc\067\ufffc" +
    "\070\ufffc\071\ufffc\072\ufffc\074\ufffc\102\ufffc\001\002\000" +
    "\004\006\222\001\002\000\004\006\uff80\001\002\000\064" +
    "\002\ufff8\003\ufff8\006\ufff8\040\ufff8\041\ufff8\042\ufff8\046" +
    "\ufff8\047\ufff8\053\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8" +
    "\060\ufff8\061\ufff8\062\ufff8\063\ufff8\065\ufff8\066\ufff8\067" +
    "\ufff8\070\ufff8\071\ufff8\072\ufff8\074\ufff8\102\ufff8\001\002" +
    "\000\064\002\uffec\003\uffec\006\uffec\040\uffec\041\uffec\042" +
    "\uffec\046\uffec\047\uffec\053\uffec\054\uffec\055\uffec\056\uffec" +
    "\057\uffec\060\uffec\061\uffec\062\uffec\063\uffec\065\uffec\066" +
    "\uffec\067\uffec\070\uffec\071\uffec\072\uffec\074\uffec\102\uffec" +
    "\001\002\000\004\046\062\001\002\000\060\003\036\006" +
    "\031\040\061\041\045\042\053\046\023\053\056\054\007" +
    "\055\020\056\050\057\010\060\052\061\030\062\021\063" +
    "\014\065\024\066\022\067\042\070\015\071\043\072\035" +
    "\074\046\102\034\001\002\000\062\003\036\006\031\040" +
    "\061\041\045\042\053\046\023\047\064\053\056\054\007" +
    "\055\020\056\050\057\010\060\052\061\030\062\021\063" +
    "\014\065\024\066\022\067\042\070\015\071\043\072\035" +
    "\074\046\102\034\001\002\000\004\041\066\001\002\000" +
    "\064\002\uffff\003\uffff\006\uffff\040\uffff\041\uffff\042\uffff" +
    "\046\uffff\047\uffff\053\uffff\054\uffff\055\uffff\056\uffff\057" +
    "\uffff\060\uffff\061\uffff\062\uffff\063\uffff\065\uffff\066\uffff" +
    "\067\uffff\070\uffff\071\uffff\072\uffff\074\uffff\102\uffff\001" +
    "\002\000\004\044\067\001\002\000\034\004\075\005\072" +
    "\006\102\007\070\010\076\011\100\012\105\022\074\037" +
    "\103\043\071\044\104\077\101\100\073\001\002\000\056" +
    "\014\uff8d\015\uff8d\017\uff8d\020\uff8d\021\uff8d\022\uff8d\023" +
    "\uff8d\024\uff8d\025\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d" +
    "\032\uff8d\033\uff8d\034\uff8d\035\uff8d\036\uff8d\045\uff8d\046" +
    "\uff8d\047\uff8d\051\uff8d\001\002\000\004\044\217\001\002" +
    "\000\056\014\uff8e\015\uff8e\017\uff8e\020\uff8e\021\uff8e\022" +
    "\uff8e\023\uff8e\024\uff8e\025\uff8e\026\uff8e\027\uff8e\030\uff8e" +
    "\031\uff8e\032\uff8e\033\uff8e\034\uff8e\035\uff8e\036\uff8e\045" +
    "\uff8e\046\uff8e\047\uff8e\051\uff8e\001\002\000\004\044\214" +
    "\001\002\000\034\004\075\005\072\006\102\007\070\010" +
    "\076\011\100\012\105\022\074\037\103\043\071\044\104" +
    "\077\101\100\073\001\002\000\056\014\uff8f\015\uff8f\017" +
    "\uff8f\020\uff8f\021\uff8f\022\uff8f\023\uff8f\024\uff8f\025\uff8f" +
    "\026\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f\034" +
    "\uff8f\035\uff8f\036\uff8f\045\uff8f\046\uff8f\047\uff8f\051\uff8f" +
    "\001\002\000\056\014\uff8b\015\uff8b\017\uff8b\020\uff8b\021" +
    "\uff8b\022\uff8b\023\uff8b\024\uff8b\025\uff8b\026\uff8b\027\uff8b" +
    "\030\uff8b\031\uff8b\032\uff8b\033\uff8b\034\uff8b\035\uff8b\036" +
    "\uff8b\045\uff8b\046\uff8b\047\uff8b\051\uff8b\001\002\000\042" +
    "\020\130\021\122\022\120\023\125\024\132\025\121\026" +
    "\124\027\126\030\123\031\115\032\131\033\127\034\133" +
    "\035\116\036\117\045\211\001\002\000\056\014\uff8a\015" +
    "\uff8a\017\uff8a\020\uff8a\021\uff8a\022\uff8a\023\uff8a\024\uff8a" +
    "\025\uff8a\026\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a\033" +
    "\uff8a\034\uff8a\035\uff8a\036\uff8a\045\uff8a\046\uff8a\047\uff8a" +
    "\051\uff8a\001\002\000\004\044\206\001\002\000\064\014" +
    "\uff89\015\uff89\016\155\017\uff89\020\uff89\021\uff89\022\uff89" +
    "\023\uff89\024\uff89\025\uff89\026\uff89\027\uff89\030\uff89\031" +
    "\uff89\032\uff89\033\uff89\034\uff89\035\uff89\036\uff89\044\156" +
    "\045\uff89\046\uff89\047\uff89\050\157\051\uff89\001\002\000" +
    "\034\004\075\005\072\006\102\007\070\010\076\011\100" +
    "\012\105\022\074\037\103\043\071\044\104\077\101\100" +
    "\073\001\002\000\042\004\075\005\072\006\102\007\070" +
    "\010\076\011\100\012\105\022\074\037\103\043\071\044" +
    "\104\055\106\057\107\063\112\077\101\100\073\001\002" +
    "\000\056\014\uff8c\015\uff8c\017\uff8c\020\uff8c\021\uff8c\022" +
    "\uff8c\023\uff8c\024\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c" +
    "\031\uff8c\032\uff8c\033\uff8c\034\uff8c\035\uff8c\036\uff8c\045" +
    "\uff8c\046\uff8c\047\uff8c\051\uff8c\001\002\000\004\045\uff88" +
    "\001\002\000\004\045\uff86\001\002\000\042\020\130\021" +
    "\122\022\120\023\125\024\132\025\121\026\124\027\126" +
    "\030\123\031\115\032\131\033\127\034\133\035\116\036" +
    "\117\045\153\001\002\000\004\045\113\001\002\000\004" +
    "\045\uff87\001\002\000\034\004\075\005\072\006\102\007" +
    "\070\010\076\011\100\012\105\022\074\037\103\043\071" +
    "\044\104\077\101\100\073\001\002\000\056\014\uff99\015" +
    "\uff99\017\uff99\020\130\021\122\022\120\023\125\024\132" +
    "\025\121\026\124\027\126\030\123\031\115\032\131\033" +
    "\127\034\133\035\116\036\117\045\uff99\046\uff99\047\uff99" +
    "\051\uff99\001\002\000\034\004\075\005\072\006\102\007" +
    "\070\010\076\011\100\012\105\022\074\037\103\043\071" +
    "\044\104\077\101\100\073\001\002\000\034\004\075\005" +
    "\072\006\102\007\070\010\076\011\100\012\105\022\074" +
    "\037\103\043\071\044\104\077\101\100\073\001\002\000" +
    "\034\004\075\005\072\006\102\007\070\010\076\011\100" +
    "\012\105\022\074\037\103\043\071\044\104\077\101\100" +
    "\073\001\002\000\034\004\075\005\072\006\102\007\070" +
    "\010\076\011\100\012\105\022\074\037\103\043\071\044" +
    "\104\077\101\100\073\001\002\000\034\004\075\005\072" +
    "\006\102\007\070\010\076\011\100\012\105\022\074\037" +
    "\103\043\071\044\104\077\101\100\073\001\002\000\034" +
    "\004\075\005\072\006\102\007\070\010\076\011\100\012" +
    "\105\022\074\037\103\043\071\044\104\077\101\100\073" +
    "\001\002\000\034\004\075\005\072\006\102\007\070\010" +
    "\076\011\100\012\105\022\074\037\103\043\071\044\104" +
    "\077\101\100\073\001\002\000\034\004\075\005\072\006" +
    "\102\007\070\010\076\011\100\012\105\022\074\037\103" +
    "\043\071\044\104\077\101\100\073\001\002\000\034\004" +
    "\075\005\072\006\102\007\070\010\076\011\100\012\105" +
    "\022\074\037\103\043\071\044\104\077\101\100\073\001" +
    "\002\000\034\004\075\005\072\006\102\007\070\010\076" +
    "\011\100\012\105\022\074\037\103\043\071\044\104\077" +
    "\101\100\073\001\002\000\034\004\075\005\072\006\102" +
    "\007\070\010\076\011\100\012\105\022\074\037\103\043" +
    "\071\044\104\077\101\100\073\001\002\000\034\004\075" +
    "\005\072\006\102\007\070\010\076\011\100\012\105\022" +
    "\074\037\103\043\071\044\104\077\101\100\073\001\002" +
    "\000\034\004\075\005\072\006\102\007\070\010\076\011" +
    "\100\012\105\022\074\037\103\043\071\044\104\077\101" +
    "\100\073\001\002\000\034\004\075\005\072\006\102\007" +
    "\070\010\076\011\100\012\105\022\074\037\103\043\071" +
    "\044\104\077\101\100\073\001\002\000\034\004\075\005" +
    "\072\006\102\007\070\010\076\011\100\012\105\022\074" +
    "\037\103\043\071\044\104\077\101\100\073\001\002\000" +
    "\056\014\uff9c\015\uff9c\017\uff9c\020\130\021\122\022\120" +
    "\023\125\024\132\025\121\026\124\027\126\030\123\031" +
    "\115\032\131\033\127\034\uff9c\035\116\036\117\045\uff9c" +
    "\046\uff9c\047\uff9c\051\uff9c\001\002\000\056\014\uffa5\015" +
    "\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5" +
    "\025\121\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033" +
    "\uffa5\034\uffa5\035\uffa5\036\uffa5\045\uffa5\046\uffa5\047\uffa5" +
    "\051\uffa5\001\002\000\056\014\uff9e\015\uff9e\017\uff9e\020" +
    "\uff9e\021\122\022\120\023\125\024\132\025\121\026\124" +
    "\027\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e\034\uff9e\035" +
    "\uff9e\036\uff9e\045\uff9e\046\uff9e\047\uff9e\051\uff9e\001\002" +
    "\000\056\014\uffa2\015\uffa2\017\uffa2\020\uffa2\021\122\022" +
    "\120\023\125\024\132\025\121\026\124\027\uffa2\030\uffa2" +
    "\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\045" +
    "\uffa2\046\uffa2\047\uffa2\051\uffa2\001\002\000\056\014\uff9d" +
    "\015\uff9d\017\uff9d\020\uff9d\021\122\022\120\023\125\024" +
    "\132\025\121\026\124\027\uff9d\030\uff9d\031\uff9d\032\uff9d" +
    "\033\uff9d\034\uff9d\035\uff9d\036\uff9d\045\uff9d\046\uff9d\047" +
    "\uff9d\051\uff9d\001\002\000\056\014\uffa1\015\uffa1\017\uffa1" +
    "\020\uffa1\021\122\022\120\023\125\024\132\025\121\026" +
    "\124\027\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\034\uffa1" +
    "\035\uffa1\036\uffa1\045\uffa1\046\uffa1\047\uffa1\051\uffa1\001" +
    "\002\000\056\014\uffa6\015\uffa6\017\uffa6\020\uffa6\021\uffa6" +
    "\022\uffa6\023\uffa6\024\uffa6\025\121\026\uffa6\027\uffa6\030" +
    "\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6" +
    "\045\uffa6\046\uffa6\047\uffa6\051\uffa6\001\002\000\056\014" +
    "\uffa3\015\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3" +
    "\024\uffa3\025\121\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032" +
    "\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\045\uffa3\046\uffa3" +
    "\047\uffa3\051\uffa3\001\002\000\056\014\uffa0\015\uffa0\017" +
    "\uffa0\020\uffa0\021\122\022\120\023\125\024\132\025\121" +
    "\026\124\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\034" +
    "\uffa0\035\uffa0\036\uffa0\045\uffa0\046\uffa0\047\uffa0\051\uffa0" +
    "\001\002\000\056\014\uffa7\015\uffa7\017\uffa7\020\uffa7\021" +
    "\uffa7\022\uffa7\023\125\024\132\025\121\026\124\027\uffa7" +
    "\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036" +
    "\uffa7\045\uffa7\046\uffa7\047\uffa7\051\uffa7\001\002\000\054" +
    "\014\uffa4\015\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023" +
    "\uffa4\024\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4" +
    "\033\uffa4\034\uffa4\035\uffa4\036\uffa4\045\uffa4\046\uffa4\047" +
    "\uffa4\051\uffa4\001\002\000\056\014\uffa8\015\uffa8\017\uffa8" +
    "\020\uffa8\021\uffa8\022\uffa8\023\125\024\132\025\121\026" +
    "\124\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8" +
    "\035\uffa8\036\uffa8\045\uffa8\046\uffa8\047\uffa8\051\uffa8\001" +
    "\002\000\056\014\uff9a\015\uff9a\017\uff9a\020\130\021\122" +
    "\022\120\023\125\024\132\025\121\026\124\027\126\030" +
    "\123\031\115\032\131\033\127\034\uff9a\035\uff9a\036\uff9a" +
    "\045\uff9a\046\uff9a\047\uff9a\051\uff9a\001\002\000\056\014" +
    "\uff9b\015\uff9b\017\uff9b\020\130\021\122\022\120\023\125" +
    "\024\132\025\121\026\124\027\126\030\123\031\115\032" +
    "\131\033\127\034\uff9b\035\uff9b\036\117\045\uff9b\046\uff9b" +
    "\047\uff9b\051\uff9b\001\002\000\056\014\uff9f\015\uff9f\017" +
    "\uff9f\020\uff9f\021\122\022\120\023\125\024\132\025\121" +
    "\026\124\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\034" +
    "\uff9f\035\uff9f\036\uff9f\045\uff9f\046\uff9f\047\uff9f\051\uff9f" +
    "\001\002\000\056\014\uffab\015\uffab\017\uffab\020\uffab\021" +
    "\uffab\022\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab" +
    "\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab\036" +
    "\uffab\045\uffab\046\uffab\047\uffab\051\uffab\001\002\000\056" +
    "\014\uffac\015\uffac\017\uffac\020\130\021\122\022\120\023" +
    "\125\024\132\025\121\026\124\027\126\030\123\031\115" +
    "\032\131\033\127\034\uffac\035\uffac\036\uffac\045\uffac\046" +
    "\uffac\047\uffac\051\uffac\001\002\000\010\006\173\076\175" +
    "\101\174\001\002\000\036\004\075\005\072\006\102\007" +
    "\070\010\076\011\100\012\105\022\074\037\103\043\071" +
    "\044\104\045\167\077\101\100\073\001\002\000\034\004" +
    "\075\005\072\006\102\007\070\010\076\011\100\012\105" +
    "\022\074\037\103\043\071\044\104\077\101\100\073\001" +
    "\002\000\042\020\130\021\122\022\120\023\125\024\132" +
    "\025\121\026\124\027\126\030\123\031\115\032\131\033" +
    "\127\034\133\035\116\036\117\051\161\001\002\000\060" +
    "\014\uff96\015\uff96\017\uff96\020\uff96\021\uff96\022\uff96\023" +
    "\uff96\024\uff96\025\uff96\026\uff96\027\uff96\030\uff96\031\uff96" +
    "\032\uff96\033\uff96\034\uff96\035\uff96\036\uff96\045\uff96\046" +
    "\uff96\047\uff96\050\162\051\uff96\001\002\000\034\004\075" +
    "\005\072\006\102\007\070\010\076\011\100\012\105\022" +
    "\074\037\103\043\071\044\104\077\101\100\073\001\002" +
    "\000\042\020\130\021\122\022\120\023\125\024\132\025" +
    "\121\026\124\027\126\030\123\031\115\032\131\033\127" +
    "\034\133\035\116\036\117\051\164\001\002\000\056\014" +
    "\uff95\015\uff95\017\uff95\020\uff95\021\uff95\022\uff95\023\uff95" +
    "\024\uff95\025\uff95\026\uff95\027\uff95\030\uff95\031\uff95\032" +
    "\uff95\033\uff95\034\uff95\035\uff95\036\uff95\045\uff95\046\uff95" +
    "\047\uff95\051\uff95\001\002\000\044\015\uffd1\020\130\021" +
    "\122\022\120\023\125\024\132\025\121\026\124\027\126" +
    "\030\123\031\115\032\131\033\127\034\133\035\116\036" +
    "\117\045\uffd1\001\002\000\006\015\170\045\171\001\002" +
    "\000\056\014\uffa9\015\uffa9\017\uffa9\020\uffa9\021\uffa9\022" +
    "\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9" +
    "\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\045" +
    "\uffa9\046\uffa9\047\uffa9\051\uffa9\001\002\000\034\004\075" +
    "\005\072\006\102\007\070\010\076\011\100\012\105\022" +
    "\074\037\103\043\071\044\104\077\101\100\073\001\002" +
    "\000\056\014\uffaa\015\uffaa\017\uffaa\020\uffaa\021\uffaa\022" +
    "\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa" +
    "\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\045" +
    "\uffaa\046\uffaa\047\uffaa\051\uffaa\001\002\000\044\015\uffd2" +
    "\020\130\021\122\022\120\023\125\024\132\025\121\026" +
    "\124\027\126\030\123\031\115\032\131\033\127\034\133" +
    "\035\116\036\117\045\uffd2\001\002\000\060\014\uff98\015" +
    "\uff98\016\204\017\uff98\020\uff98\021\uff98\022\uff98\023\uff98" +
    "\024\uff98\025\uff98\026\uff98\027\uff98\030\uff98\031\uff98\032" +
    "\uff98\033\uff98\034\uff98\035\uff98\036\uff98\045\uff98\046\uff98" +
    "\047\uff98\051\uff98\001\002\000\004\044\201\001\002\000" +
    "\004\044\176\001\002\000\034\004\075\005\072\006\102" +
    "\007\070\010\076\011\100\012\105\022\074\037\103\043" +
    "\071\044\104\077\101\100\073\001\002\000\042\020\130" +
    "\021\122\022\120\023\125\024\132\025\121\026\124\027" +
    "\126\030\123\031\115\032\131\033\127\034\133\035\116" +
    "\036\117\045\200\001\002\000\056\014\uff94\015\uff94\017" +
    "\uff94\020\uff94\021\uff94\022\uff94\023\uff94\024\uff94\025\uff94" +
    "\026\uff94\027\uff94\030\uff94\031\uff94\032\uff94\033\uff94\034" +
    "\uff94\035\uff94\036\uff94\045\uff94\046\uff94\047\uff94\051\uff94" +
    "\001\002\000\034\004\075\005\072\006\102\007\070\010" +
    "\076\011\100\012\105\022\074\037\103\043\071\044\104" +
    "\077\101\100\073\001\002\000\042\020\130\021\122\022" +
    "\120\023\125\024\132\025\121\026\124\027\126\030\123" +
    "\031\115\032\131\033\127\034\133\035\116\036\117\045" +
    "\203\001\002\000\056\014\uff90\015\uff90\017\uff90\020\uff90" +
    "\021\uff90\022\uff90\023\uff90\024\uff90\025\uff90\026\uff90\027" +
    "\uff90\030\uff90\031\uff90\032\uff90\033\uff90\034\uff90\035\uff90" +
    "\036\uff90\045\uff90\046\uff90\047\uff90\051\uff90\001\002\000" +
    "\004\006\205\001\002\000\056\014\uff97\015\uff97\017\uff97" +
    "\020\uff97\021\uff97\022\uff97\023\uff97\024\uff97\025\uff97\026" +
    "\uff97\027\uff97\030\uff97\031\uff97\032\uff97\033\uff97\034\uff97" +
    "\035\uff97\036\uff97\045\uff97\046\uff97\047\uff97\051\uff97\001" +
    "\002\000\034\004\075\005\072\006\102\007\070\010\076" +
    "\011\100\012\105\022\074\037\103\043\071\044\104\077" +
    "\101\100\073\001\002\000\042\020\130\021\122\022\120" +
    "\023\125\024\132\025\121\026\124\027\126\030\123\031" +
    "\115\032\131\033\127\034\133\035\116\036\117\045\210" +
    "\001\002\000\056\014\uff92\015\uff92\017\uff92\020\uff92\021" +
    "\uff92\022\uff92\023\uff92\024\uff92\025\uff92\026\uff92\027\uff92" +
    "\030\uff92\031\uff92\032\uff92\033\uff92\034\uff92\035\uff92\036" +
    "\uff92\045\uff92\046\uff92\047\uff92\051\uff92\001\002\000\004" +
    "\014\212\001\002\000\064\002\uffc0\003\uffc0\006\uffc0\040" +
    "\uffc0\041\uffc0\042\uffc0\046\uffc0\047\uffc0\053\uffc0\054\uffc0" +
    "\055\uffc0\056\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0\063" +
    "\uffc0\065\uffc0\066\uffc0\067\uffc0\070\uffc0\071\uffc0\072\uffc0" +
    "\074\uffc0\102\uffc0\001\002\000\056\014\uffad\015\uffad\017" +
    "\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad" +
    "\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad\034" +
    "\uffad\035\uffad\036\uffad\045\uffad\046\uffad\047\uffad\051\uffad" +
    "\001\002\000\034\004\075\005\072\006\102\007\070\010" +
    "\076\011\100\012\105\022\074\037\103\043\071\044\104" +
    "\077\101\100\073\001\002\000\042\020\130\021\122\022" +
    "\120\023\125\024\132\025\121\026\124\027\126\030\123" +
    "\031\115\032\131\033\127\034\133\035\116\036\117\045" +
    "\216\001\002\000\056\014\uff91\015\uff91\017\uff91\020\uff91" +
    "\021\uff91\022\uff91\023\uff91\024\uff91\025\uff91\026\uff91\027" +
    "\uff91\030\uff91\031\uff91\032\uff91\033\uff91\034\uff91\035\uff91" +
    "\036\uff91\045\uff91\046\uff91\047\uff91\051\uff91\001\002\000" +
    "\034\004\075\005\072\006\102\007\070\010\076\011\100" +
    "\012\105\022\074\037\103\043\071\044\104\077\101\100" +
    "\073\001\002\000\042\020\130\021\122\022\120\023\125" +
    "\024\132\025\121\026\124\027\126\030\123\031\115\032" +
    "\131\033\127\034\133\035\116\036\117\045\221\001\002" +
    "\000\056\014\uff93\015\uff93\017\uff93\020\uff93\021\uff93\022" +
    "\uff93\023\uff93\024\uff93\025\uff93\026\uff93\027\uff93\030\uff93" +
    "\031\uff93\032\uff93\033\uff93\034\uff93\035\uff93\036\uff93\045" +
    "\uff93\046\uff93\047\uff93\051\uff93\001\002\000\004\044\223" +
    "\001\002\000\016\045\224\055\020\056\050\057\010\060" +
    "\052\063\014\001\002\000\004\046\237\001\002\000\004" +
    "\006\236\001\002\000\006\015\227\045\230\001\002\000" +
    "\014\055\020\056\050\057\010\060\052\063\014\001\002" +
    "\000\004\046\231\001\002\000\060\003\036\006\031\040" +
    "\061\041\045\042\053\046\023\053\056\054\007\055\020" +
    "\056\050\057\010\060\052\061\030\062\021\063\014\065" +
    "\024\066\022\067\042\070\015\071\043\072\035\074\046" +
    "\102\034\001\002\000\062\003\036\006\031\040\061\041" +
    "\045\042\053\046\023\047\233\053\056\054\007\055\020" +
    "\056\050\057\010\060\052\061\030\062\021\063\014\065" +
    "\024\066\022\067\042\070\015\071\043\072\035\074\046" +
    "\102\034\001\002\000\064\002\uffdb\003\uffdb\006\uffdb\040" +
    "\uffdb\041\uffdb\042\uffdb\046\uffdb\047\uffdb\053\uffdb\054\uffdb" +
    "\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb\063" +
    "\uffdb\065\uffdb\066\uffdb\067\uffdb\070\uffdb\071\uffdb\072\uffdb" +
    "\074\uffdb\102\uffdb\001\002\000\004\006\235\001\002\000" +
    "\006\015\uffc8\045\uffc8\001\002\000\006\015\uffc7\045\uffc7" +
    "\001\002\000\060\003\036\006\031\040\061\041\045\042" +
    "\053\046\023\053\056\054\007\055\020\056\050\057\010" +
    "\060\052\061\030\062\021\063\014\065\024\066\022\067" +
    "\042\070\015\071\043\072\035\074\046\102\034\001\002" +
    "\000\062\003\036\006\031\040\061\041\045\042\053\046" +
    "\023\047\241\053\056\054\007\055\020\056\050\057\010" +
    "\060\052\061\030\062\021\063\014\065\024\066\022\067" +
    "\042\070\015\071\043\072\035\074\046\102\034\001\002" +
    "\000\064\002\uffda\003\uffda\006\uffda\040\uffda\041\uffda\042" +
    "\uffda\046\uffda\047\uffda\053\uffda\054\uffda\055\uffda\056\uffda" +
    "\057\uffda\060\uffda\061\uffda\062\uffda\063\uffda\065\uffda\066" +
    "\uffda\067\uffda\070\uffda\071\uffda\072\uffda\074\uffda\102\uffda" +
    "\001\002\000\004\006\243\001\002\000\004\013\254\001" +
    "\002\000\006\006\243\047\250\001\002\000\004\014\246" +
    "\001\002\000\006\006\uffcf\047\uffcf\001\002\000\004\014" +
    "\253\001\002\000\004\006\251\001\002\000\004\014\252" +
    "\001\002\000\064\002\uffd9\003\uffd9\006\uffd9\040\uffd9\041" +
    "\uffd9\042\uffd9\046\uffd9\047\uffd9\053\uffd9\054\uffd9\055\uffd9" +
    "\056\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9\065" +
    "\uffd9\066\uffd9\067\uffd9\070\uffd9\071\uffd9\072\uffd9\074\uffd9" +
    "\102\uffd9\001\002\000\006\006\uffd0\047\uffd0\001\002\000" +
    "\016\006\255\055\020\056\050\057\010\060\052\063\014" +
    "\001\002\000\004\014\uffcd\001\002\000\004\014\uffce\001" +
    "\002\000\014\055\020\056\050\057\010\060\052\063\014" +
    "\001\002\000\004\032\261\001\002\000\004\006\262\001" +
    "\002\000\004\017\263\001\002\000\004\073\264\001\002" +
    "\000\004\074\265\001\002\000\004\044\266\001\002\000" +
    "\004\045\267\001\002\000\004\014\270\001\002\000\114" +
    "\002\uffe5\003\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010" +
    "\uffe5\011\uffe5\012\uffe5\022\uffe5\037\uffe5\040\uffe5\041\uffe5" +
    "\042\uffe5\043\uffe5\044\uffe5\046\uffe5\047\uffe5\053\uffe5\054" +
    "\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5" +
    "\063\uffe5\065\uffe5\066\uffe5\067\uffe5\070\uffe5\071\uffe5\072" +
    "\uffe5\074\uffe5\077\uffe5\100\uffe5\102\uffe5\001\002\000\034" +
    "\004\075\005\072\006\102\007\070\010\076\011\100\012" +
    "\105\022\074\037\103\043\071\044\104\077\101\100\073" +
    "\001\002\000\042\020\130\021\122\022\120\023\125\024" +
    "\132\025\121\026\124\027\126\030\123\031\115\032\131" +
    "\033\127\034\133\035\116\036\117\045\273\001\002\000" +
    "\004\046\274\001\002\000\060\003\036\006\031\040\061" +
    "\041\045\042\053\046\023\053\056\054\007\055\020\056" +
    "\050\057\010\060\052\061\030\062\021\063\014\065\024" +
    "\066\022\067\042\070\015\071\043\072\035\074\046\102" +
    "\034\001\002\000\062\003\036\006\031\040\061\041\045" +
    "\042\053\046\023\047\276\053\056\054\007\055\020\056" +
    "\050\057\010\060\052\061\030\062\021\063\014\065\024" +
    "\066\022\067\042\070\015\071\043\072\035\074\046\102" +
    "\034\001\002\000\064\002\uffc1\003\uffc1\006\uffc1\040\uffc1" +
    "\041\uffc1\042\uffc1\046\uffc1\047\uffc1\053\uffc1\054\uffc1\055" +
    "\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1" +
    "\065\uffc1\066\uffc1\067\uffc1\070\uffc1\071\uffc1\072\uffc1\074" +
    "\uffc1\102\uffc1\001\002\000\004\013\300\001\002\000\016" +
    "\006\301\055\020\056\050\057\010\060\052\063\014\001" +
    "\002\000\004\017\337\001\002\000\010\014\303\017\304" +
    "\050\305\001\002\000\114\002\uffe8\003\uffe8\004\uffe8\005" +
    "\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\022\uffe8" +
    "\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\046" +
    "\uffe8\047\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8" +
    "\060\uffe8\061\uffe8\062\uffe8\063\uffe8\065\uffe8\066\uffe8\067" +
    "\uffe8\070\uffe8\071\uffe8\072\uffe8\074\uffe8\077\uffe8\100\uffe8" +
    "\102\uffe8\001\002\000\034\004\075\005\072\006\102\007" +
    "\070\010\076\011\100\012\105\022\074\037\103\043\071" +
    "\044\104\077\101\100\073\001\002\000\004\051\306\001" +
    "\002\000\006\017\307\050\310\001\002\000\004\050\331" +
    "\001\002\000\004\051\311\001\002\000\004\017\312\001" +
    "\002\000\004\050\313\001\002\000\004\050\315\001\002" +
    "\000\006\015\323\051\324\001\002\000\034\004\075\005" +
    "\072\006\102\007\070\010\076\011\100\012\105\022\074" +
    "\037\103\043\071\044\104\077\101\100\073\001\002\000" +
    "\044\015\uffb9\020\130\021\122\022\120\023\125\024\132" +
    "\025\121\026\124\027\126\030\123\031\115\032\131\033" +
    "\127\034\133\035\116\036\117\051\uffb9\001\002\000\006" +
    "\015\320\051\321\001\002\000\034\004\075\005\072\006" +
    "\102\007\070\010\076\011\100\012\105\022\074\037\103" +
    "\043\071\044\104\077\101\100\073\001\002\000\006\015" +
    "\uffb7\051\uffb7\001\002\000\044\015\uffba\020\130\021\122" +
    "\022\120\023\125\024\132\025\121\026\124\027\126\030" +
    "\123\031\115\032\131\033\127\034\133\035\116\036\117" +
    "\051\uffba\001\002\000\004\050\326\001\002\000\004\014" +
    "\325\001\002\000\114\002\uffe6\003\uffe6\004\uffe6\005\uffe6" +
    "\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\022\uffe6\037" +
    "\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\046\uffe6" +
    "\047\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6\060" +
    "\uffe6\061\uffe6\062\uffe6\063\uffe6\065\uffe6\066\uffe6\067\uffe6" +
    "\070\uffe6\071\uffe6\072\uffe6\074\uffe6\077\uffe6\100\uffe6\102" +
    "\uffe6\001\002\000\034\004\075\005\072\006\102\007\070" +
    "\010\076\011\100\012\105\022\074\037\103\043\071\044" +
    "\104\077\101\100\073\001\002\000\006\015\320\051\330" +
    "\001\002\000\006\015\uffb8\051\uffb8\001\002\000\034\004" +
    "\075\005\072\006\102\007\070\010\076\011\100\012\105" +
    "\022\074\037\103\043\071\044\104\077\101\100\073\001" +
    "\002\000\006\015\320\051\333\001\002\000\004\014\334" +
    "\001\002\000\114\002\uffe7\003\uffe7\004\uffe7\005\uffe7\006" +
    "\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\022\uffe7\037\uffe7" +
    "\040\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\046\uffe7\047" +
    "\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7" +
    "\061\uffe7\062\uffe7\063\uffe7\065\uffe7\066\uffe7\067\uffe7\070" +
    "\uffe7\071\uffe7\072\uffe7\074\uffe7\077\uffe7\100\uffe7\102\uffe7" +
    "\001\002\000\042\014\336\020\130\021\122\022\120\023" +
    "\125\024\132\025\121\026\124\027\126\030\123\031\115" +
    "\032\131\033\127\034\133\035\116\036\117\001\002\000" +
    "\114\002\uffe9\003\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9" +
    "\010\uffe9\011\uffe9\012\uffe9\022\uffe9\037\uffe9\040\uffe9\041" +
    "\uffe9\042\uffe9\043\uffe9\044\uffe9\046\uffe9\047\uffe9\053\uffe9" +
    "\054\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9\061\uffe9\062" +
    "\uffe9\063\uffe9\065\uffe9\066\uffe9\067\uffe9\070\uffe9\071\uffe9" +
    "\072\uffe9\074\uffe9\077\uffe9\100\uffe9\102\uffe9\001\002\000" +
    "\004\046\340\001\002\000\004\006\341\001\002\000\004" +
    "\013\350\001\002\000\006\015\uffcb\047\uffcb\001\002\000" +
    "\006\015\344\047\345\001\002\000\004\006\341\001\002" +
    "\000\004\014\346\001\002\000\066\002\uffd8\003\uffd8\006" +
    "\uffd8\015\uffd8\040\uffd8\041\uffd8\042\uffd8\046\uffd8\047\uffd8" +
    "\053\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8\061" +
    "\uffd8\062\uffd8\063\uffd8\065\uffd8\066\uffd8\067\uffd8\070\uffd8" +
    "\071\uffd8\072\uffd8\074\uffd8\102\uffd8\001\002\000\006\015" +
    "\uffcc\047\uffcc\001\002\000\042\004\075\005\072\006\102" +
    "\007\070\010\076\011\100\012\105\022\074\037\103\043" +
    "\071\044\104\046\023\053\056\054\007\077\101\100\073" +
    "\001\002\000\004\006\354\001\002\000\044\015\uffca\020" +
    "\130\021\122\022\120\023\125\024\132\025\121\026\124" +
    "\027\126\030\123\031\115\032\131\033\127\034\133\035" +
    "\116\036\117\047\uffca\001\002\000\006\015\uffc9\047\uffc9" +
    "\001\002\000\004\013\355\001\002\000\004\006\301\001" +
    "\002\000\004\044\357\001\002\000\016\045\360\055\020" +
    "\056\050\057\010\060\052\063\014\001\002\000\004\046" +
    "\366\001\002\000\006\015\227\045\362\001\002\000\004" +
    "\046\363\001\002\000\060\003\036\006\031\040\061\041" +
    "\045\042\053\046\023\053\056\054\007\055\020\056\050" +
    "\057\010\060\052\061\030\062\021\063\014\065\024\066" +
    "\022\067\042\070\015\071\043\072\035\074\046\102\034" +
    "\001\002\000\062\003\036\006\031\040\061\041\045\042" +
    "\053\046\023\047\365\053\056\054\007\055\020\056\050" +
    "\057\010\060\052\061\030\062\021\063\014\065\024\066" +
    "\022\067\042\070\015\071\043\072\035\074\046\102\034" +
    "\001\002\000\064\002\uffdd\003\uffdd\006\uffdd\040\uffdd\041" +
    "\uffdd\042\uffdd\046\uffdd\047\uffdd\053\uffdd\054\uffdd\055\uffdd" +
    "\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd\063\uffdd\065" +
    "\uffdd\066\uffdd\067\uffdd\070\uffdd\071\uffdd\072\uffdd\074\uffdd" +
    "\102\uffdd\001\002\000\060\003\036\006\031\040\061\041" +
    "\045\042\053\046\023\053\056\054\007\055\020\056\050" +
    "\057\010\060\052\061\030\062\021\063\014\065\024\066" +
    "\022\067\042\070\015\071\043\072\035\074\046\102\034" +
    "\001\002\000\062\003\036\006\031\040\061\041\045\042" +
    "\053\046\023\047\370\053\056\054\007\055\020\056\050" +
    "\057\010\060\052\061\030\062\021\063\014\065\024\066" +
    "\022\067\042\070\015\071\043\072\035\074\046\102\034" +
    "\001\002\000\064\002\uffdc\003\uffdc\006\uffdc\040\uffdc\041" +
    "\uffdc\042\uffdc\046\uffdc\047\uffdc\053\uffdc\054\uffdc\055\uffdc" +
    "\056\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc\063\uffdc\065" +
    "\uffdc\066\uffdc\067\uffdc\070\uffdc\071\uffdc\072\uffdc\074\uffdc" +
    "\102\uffdc\001\002\000\064\002\uffb1\003\uffb1\006\uffb1\040" +
    "\uffb1\041\uffb1\042\uffb1\046\uffb1\047\uffb1\053\uffb1\054\uffb1" +
    "\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\063" +
    "\uffb1\065\uffb1\066\uffb1\067\uffb1\070\uffb1\071\uffb1\072\uffb1" +
    "\074\uffb1\102\uffb1\001\002\000\064\002\uffeb\003\uffeb\006" +
    "\uffeb\040\uffeb\041\uffeb\042\uffeb\046\uffeb\047\uffeb\053\uffeb" +
    "\054\uffeb\055\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062" +
    "\uffeb\063\uffeb\065\uffeb\066\uffeb\067\uffeb\070\uffeb\071\uffeb" +
    "\072\uffeb\074\uffeb\102\uffeb\001\002\000\004\044\374\001" +
    "\002\000\036\004\075\005\072\006\102\007\070\010\076" +
    "\011\100\012\105\022\074\037\103\043\071\044\104\045" +
    "\376\077\101\100\073\001\002\000\006\015\170\045\u0100" +
    "\001\002\000\004\014\377\001\002\000\064\002\uffd5\003" +
    "\uffd5\006\uffd5\040\uffd5\041\uffd5\042\uffd5\046\uffd5\047\uffd5" +
    "\053\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\061" +
    "\uffd5\062\uffd5\063\uffd5\065\uffd5\066\uffd5\067\uffd5\070\uffd5" +
    "\071\uffd5\072\uffd5\074\uffd5\102\uffd5\001\002\000\004\014" +
    "\u0101\001\002\000\064\002\uffd6\003\uffd6\006\uffd6\040\uffd6" +
    "\041\uffd6\042\uffd6\046\uffd6\047\uffd6\053\uffd6\054\uffd6\055" +
    "\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\063\uffd6" +
    "\065\uffd6\066\uffd6\067\uffd6\070\uffd6\071\uffd6\072\uffd6\074" +
    "\uffd6\102\uffd6\001\002\000\042\014\u0104\020\130\021\122" +
    "\022\120\023\125\024\132\025\121\026\124\027\126\030" +
    "\123\031\115\032\131\033\127\034\133\035\116\036\117" +
    "\001\002\000\064\002\uffae\003\uffae\006\uffae\040\uffae\041" +
    "\uffae\042\uffae\046\uffae\047\uffae\053\uffae\054\uffae\055\uffae" +
    "\056\uffae\057\uffae\060\uffae\061\uffae\062\uffae\063\uffae\065" +
    "\uffae\066\uffae\067\uffae\070\uffae\071\uffae\072\uffae\074\uffae" +
    "\102\uffae\001\002\000\064\002\uffaf\003\uffaf\006\uffaf\040" +
    "\uffaf\041\uffaf\042\uffaf\046\uffaf\047\uffaf\053\uffaf\054\uffaf" +
    "\055\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf\063" +
    "\uffaf\065\uffaf\066\uffaf\067\uffaf\070\uffaf\071\uffaf\072\uffaf" +
    "\074\uffaf\102\uffaf\001\002\000\010\006\u0121\075\u0122\076" +
    "\u0123\001\002\000\034\004\075\005\072\006\102\007\070" +
    "\010\076\011\100\012\105\022\074\037\103\043\071\044" +
    "\104\077\101\100\073\001\002\000\004\021\u011d\001\002" +
    "\000\004\022\u011b\001\002\000\036\004\075\005\072\006" +
    "\102\007\070\010\076\011\100\012\105\022\074\037\103" +
    "\043\071\044\104\045\u0117\077\101\100\073\001\002\000" +
    "\034\004\075\005\072\006\102\007\070\010\076\011\100" +
    "\012\105\022\074\037\103\043\071\044\104\077\101\100" +
    "\073\001\002\000\042\020\130\021\122\022\120\023\125" +
    "\024\132\025\121\026\124\027\126\030\123\031\115\032" +
    "\131\033\127\034\133\035\116\036\117\051\u010c\001\002" +
    "\000\006\017\u010d\050\u010e\001\002\000\034\004\075\005" +
    "\072\006\102\007\070\010\076\011\100\012\105\022\074" +
    "\037\103\043\071\044\104\077\101\100\073\001\002\000" +
    "\034\004\075\005\072\006\102\007\070\010\076\011\100" +
    "\012\105\022\074\037\103\043\071\044\104\077\101\100" +
    "\073\001\002\000\042\020\130\021\122\022\120\023\125" +
    "\024\132\025\121\026\124\027\126\030\123\031\115\032" +
    "\131\033\127\034\133\035\116\036\117\051\u0110\001\002" +
    "\000\004\017\u0111\001\002\000\034\004\075\005\072\006" +
    "\102\007\070\010\076\011\100\012\105\022\074\037\103" +
    "\043\071\044\104\077\101\100\073\001\002\000\042\014" +
    "\u0113\020\130\021\122\022\120\023\125\024\132\025\121" +
    "\026\124\027\126\030\123\031\115\032\131\033\127\034" +
    "\133\035\116\036\117\001\002\000\114\002\uffe2\003\uffe2" +
    "\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012" +
    "\uffe2\022\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2" +
    "\044\uffe2\046\uffe2\047\uffe2\053\uffe2\054\uffe2\055\uffe2\056" +
    "\uffe2\057\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2\065\uffe2" +
    "\066\uffe2\067\uffe2\070\uffe2\071\uffe2\072\uffe2\074\uffe2\077" +
    "\uffe2\100\uffe2\102\uffe2\001\002\000\042\014\u0115\020\130" +
    "\021\122\022\120\023\125\024\132\025\121\026\124\027" +
    "\126\030\123\031\115\032\131\033\127\034\133\035\116" +
    "\036\117\001\002\000\114\002\uffe3\003\uffe3\004\uffe3\005" +
    "\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\022\uffe3" +
    "\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\046" +
    "\uffe3\047\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3" +
    "\060\uffe3\061\uffe3\062\uffe3\063\uffe3\065\uffe3\066\uffe3\067" +
    "\uffe3\070\uffe3\071\uffe3\072\uffe3\074\uffe3\077\uffe3\100\uffe3" +
    "\102\uffe3\001\002\000\006\015\170\045\u0119\001\002\000" +
    "\004\014\u0118\001\002\000\064\002\uffd3\003\uffd3\006\uffd3" +
    "\040\uffd3\041\uffd3\042\uffd3\046\uffd3\047\uffd3\053\uffd3\054" +
    "\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\062\uffd3" +
    "\063\uffd3\065\uffd3\066\uffd3\067\uffd3\070\uffd3\071\uffd3\072" +
    "\uffd3\074\uffd3\102\uffd3\001\002\000\004\014\u011a\001\002" +
    "\000\064\002\uffd4\003\uffd4\006\uffd4\040\uffd4\041\uffd4\042" +
    "\uffd4\046\uffd4\047\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4" +
    "\057\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4\065\uffd4\066" +
    "\uffd4\067\uffd4\070\uffd4\071\uffd4\072\uffd4\074\uffd4\102\uffd4" +
    "\001\002\000\004\014\u011c\001\002\000\114\002\uffde\003" +
    "\uffde\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde" +
    "\012\uffde\022\uffde\037\uffde\040\uffde\041\uffde\042\uffde\043" +
    "\uffde\044\uffde\046\uffde\047\uffde\053\uffde\054\uffde\055\uffde" +
    "\056\uffde\057\uffde\060\uffde\061\uffde\062\uffde\063\uffde\065" +
    "\uffde\066\uffde\067\uffde\070\uffde\071\uffde\072\uffde\074\uffde" +
    "\077\uffde\100\uffde\102\uffde\001\002\000\004\014\u011e\001" +
    "\002\000\114\002\uffdf\003\uffdf\004\uffdf\005\uffdf\006\uffdf" +
    "\007\uffdf\010\uffdf\011\uffdf\012\uffdf\022\uffdf\037\uffdf\040" +
    "\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf\046\uffdf\047\uffdf" +
    "\053\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf\061" +
    "\uffdf\062\uffdf\063\uffdf\065\uffdf\066\uffdf\067\uffdf\070\uffdf" +
    "\071\uffdf\072\uffdf\074\uffdf\077\uffdf\100\uffdf\102\uffdf\001" +
    "\002\000\042\014\u0120\020\130\021\122\022\120\023\125" +
    "\024\132\025\121\026\124\027\126\030\123\031\115\032" +
    "\131\033\127\034\133\035\116\036\117\001\002\000\114" +
    "\002\uffe4\003\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010" +
    "\uffe4\011\uffe4\012\uffe4\022\uffe4\037\uffe4\040\uffe4\041\uffe4" +
    "\042\uffe4\043\uffe4\044\uffe4\046\uffe4\047\uffe4\053\uffe4\054" +
    "\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4" +
    "\063\uffe4\065\uffe4\066\uffe4\067\uffe4\070\uffe4\071\uffe4\072" +
    "\uffe4\074\uffe4\077\uffe4\100\uffe4\102\uffe4\001\002\000\006" +
    "\016\u012c\017\u012d\001\002\000\004\044\u0128\001\002\000" +
    "\004\044\u0124\001\002\000\034\004\075\005\072\006\102" +
    "\007\070\010\076\011\100\012\105\022\074\037\103\043" +
    "\071\044\104\077\101\100\073\001\002\000\042\020\130" +
    "\021\122\022\120\023\125\024\132\025\121\026\124\027" +
    "\126\030\123\031\115\032\131\033\127\034\133\035\116" +
    "\036\117\045\u0126\001\002\000\004\014\u0127\001\002\000" +
    "\064\002\uffb6\003\uffb6\006\uffb6\040\uffb6\041\uffb6\042\uffb6" +
    "\046\uffb6\047\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057" +
    "\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6\065\uffb6\066\uffb6" +
    "\067\uffb6\070\uffb6\071\uffb6\072\uffb6\074\uffb6\102\uffb6\001" +
    "\002\000\034\004\075\005\072\006\102\007\070\010\076" +
    "\011\100\012\105\022\074\037\103\043\071\044\104\077" +
    "\101\100\073\001\002\000\042\020\130\021\122\022\120" +
    "\023\125\024\132\025\121\026\124\027\126\030\123\031" +
    "\115\032\131\033\127\034\133\035\116\036\117\045\u012a" +
    "\001\002\000\004\014\u012b\001\002\000\064\002\uffbb\003" +
    "\uffbb\006\uffbb\040\uffbb\041\uffbb\042\uffbb\046\uffbb\047\uffbb" +
    "\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\061" +
    "\uffbb\062\uffbb\063\uffbb\065\uffbb\066\uffbb\067\uffbb\070\uffbb" +
    "\071\uffbb\072\uffbb\074\uffbb\102\uffbb\001\002\000\004\006" +
    "\u0130\001\002\000\034\004\075\005\072\006\102\007\070" +
    "\010\076\011\100\012\105\022\074\037\103\043\071\044" +
    "\104\077\101\100\073\001\002\000\042\014\u012f\020\130" +
    "\021\122\022\120\023\125\024\132\025\121\026\124\027" +
    "\126\030\123\031\115\032\131\033\127\034\133\035\116" +
    "\036\117\001\002\000\114\002\uffe1\003\uffe1\004\uffe1\005" +
    "\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\022\uffe1" +
    "\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\046" +
    "\uffe1\047\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1" +
    "\060\uffe1\061\uffe1\062\uffe1\063\uffe1\065\uffe1\066\uffe1\067" +
    "\uffe1\070\uffe1\071\uffe1\072\uffe1\074\uffe1\077\uffe1\100\uffe1" +
    "\102\uffe1\001\002\000\004\017\u0131\001\002\000\034\004" +
    "\075\005\072\006\102\007\070\010\076\011\100\012\105" +
    "\022\074\037\103\043\071\044\104\077\101\100\073\001" +
    "\002\000\042\014\u0133\020\130\021\122\022\120\023\125" +
    "\024\132\025\121\026\124\027\126\030\123\031\115\032" +
    "\131\033\127\034\133\035\116\036\117\001\002\000\114" +
    "\002\uffe0\003\uffe0\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010" +
    "\uffe0\011\uffe0\012\uffe0\022\uffe0\037\uffe0\040\uffe0\041\uffe0" +
    "\042\uffe0\043\uffe0\044\uffe0\046\uffe0\047\uffe0\053\uffe0\054" +
    "\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0" +
    "\063\uffe0\065\uffe0\066\uffe0\067\uffe0\070\uffe0\071\uffe0\072" +
    "\uffe0\074\uffe0\077\uffe0\100\uffe0\102\uffe0\001\002\000\034" +
    "\004\075\005\072\006\102\007\070\010\076\011\100\012" +
    "\105\022\074\037\103\043\071\044\104\077\101\100\073" +
    "\001\002\000\042\020\130\021\122\022\120\023\125\024" +
    "\132\025\121\026\124\027\126\030\123\031\115\032\131" +
    "\033\127\034\133\035\116\036\117\045\u0136\001\002\000" +
    "\004\046\u0137\001\002\000\060\003\036\006\031\040\061" +
    "\041\045\042\053\046\023\053\056\054\007\055\020\056" +
    "\050\057\010\060\052\061\030\062\021\063\014\065\024" +
    "\066\022\067\042\070\015\071\043\072\035\074\046\102" +
    "\034\001\002\000\062\003\036\006\031\040\061\041\045" +
    "\042\053\046\023\047\u0139\053\056\054\007\055\020\056" +
    "\050\057\010\060\052\061\030\062\021\063\014\065\024" +
    "\066\022\067\042\070\015\071\043\072\035\074\046\102" +
    "\034\001\002\000\066\002\uffc6\003\uffc6\006\uffc6\040\uffc6" +
    "\041\uffc6\042\uffc6\046\uffc6\047\uffc6\053\uffc6\054\uffc6\055" +
    "\uffc6\056\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6" +
    "\064\u013a\065\uffc6\066\uffc6\067\uffc6\070\uffc6\071\uffc6\072" +
    "\uffc6\074\uffc6\102\uffc6\001\002\000\006\046\u013b\061\030" +
    "\001\002\000\060\003\036\006\031\040\061\041\045\042" +
    "\053\046\023\053\056\054\007\055\020\056\050\057\010" +
    "\060\052\061\030\062\021\063\014\065\024\066\022\067" +
    "\042\070\015\071\043\072\035\074\046\102\034\001\002" +
    "\000\064\002\uffc4\003\uffc4\006\uffc4\040\uffc4\041\uffc4\042" +
    "\uffc4\046\uffc4\047\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4" +
    "\057\uffc4\060\uffc4\061\uffc4\062\uffc4\063\uffc4\065\uffc4\066" +
    "\uffc4\067\uffc4\070\uffc4\071\uffc4\072\uffc4\074\uffc4\102\uffc4" +
    "\001\002\000\062\003\036\006\031\040\061\041\045\042" +
    "\053\046\023\047\u013e\053\056\054\007\055\020\056\050" +
    "\057\010\060\052\061\030\062\021\063\014\065\024\066" +
    "\022\067\042\070\015\071\043\072\035\074\046\102\034" +
    "\001\002\000\064\002\uffc5\003\uffc5\006\uffc5\040\uffc5\041" +
    "\uffc5\042\uffc5\046\uffc5\047\uffc5\053\uffc5\054\uffc5\055\uffc5" +
    "\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\063\uffc5\065" +
    "\uffc5\066\uffc5\067\uffc5\070\uffc5\071\uffc5\072\uffc5\074\uffc5" +
    "\102\uffc5\001\002\000\004\002\001\001\002\000\042\020" +
    "\130\021\122\022\120\023\125\024\132\025\121\026\124" +
    "\027\126\030\123\031\115\032\131\033\127\034\133\035" +
    "\116\036\117\046\u0141\001\002\000\036\004\075\005\072" +
    "\006\102\007\070\010\076\011\100\012\105\022\074\037" +
    "\103\043\071\044\104\052\u0142\077\101\100\073\001\002" +
    "\000\004\017\u014d\001\002\000\040\004\uffb4\005\uffb4\006" +
    "\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\022\uffb4\037\uffb4" +
    "\043\uffb4\044\uffb4\047\uffb4\052\uffb4\077\uffb4\100\uffb4\001" +
    "\002\000\040\004\075\005\072\006\102\007\070\010\076" +
    "\011\100\012\105\022\074\037\103\043\071\044\104\047" +
    "\u014c\052\u0142\077\101\100\073\001\002\000\042\017\u0146" +
    "\020\130\021\122\022\120\023\125\024\132\025\121\026" +
    "\124\027\126\030\123\031\115\032\131\033\127\034\133" +
    "\035\116\036\117\001\002\000\004\032\u0147\001\002\000" +
    "\004\046\u0148\001\002\000\060\003\036\006\031\040\061" +
    "\041\045\042\053\046\023\053\056\054\007\055\020\056" +
    "\050\057\010\060\052\061\030\062\021\063\014\065\024" +
    "\066\022\067\042\070\015\071\043\072\035\074\046\102" +
    "\034\001\002\000\062\003\036\006\031\040\061\041\045" +
    "\042\053\046\023\047\u014a\053\056\054\007\055\020\056" +
    "\050\057\010\060\052\061\030\062\021\063\014\065\024" +
    "\066\022\067\042\070\015\071\043\072\035\074\046\102" +
    "\034\001\002\000\040\004\uffb3\005\uffb3\006\uffb3\007\uffb3" +
    "\010\uffb3\011\uffb3\012\uffb3\022\uffb3\037\uffb3\043\uffb3\044" +
    "\uffb3\047\uffb3\052\uffb3\077\uffb3\100\uffb3\001\002\000\040" +
    "\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012" +
    "\uffb5\022\uffb5\037\uffb5\043\uffb5\044\uffb5\047\uffb5\052\uffb5" +
    "\077\uffb5\100\uffb5\001\002\000\064\002\uffbc\003\uffbc\006" +
    "\uffbc\040\uffbc\041\uffbc\042\uffbc\046\uffbc\047\uffbc\053\uffbc" +
    "\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc\062" +
    "\uffbc\063\uffbc\065\uffbc\066\uffbc\067\uffbc\070\uffbc\071\uffbc" +
    "\072\uffbc\074\uffbc\102\uffbc\001\002\000\004\032\u014e\001" +
    "\002\000\004\046\u014f\001\002\000\060\003\036\006\031" +
    "\040\061\041\045\042\053\046\023\053\056\054\007\055" +
    "\020\056\050\057\010\060\052\061\030\062\021\063\014" +
    "\065\024\066\022\067\042\070\015\071\043\072\035\074" +
    "\046\102\034\001\002\000\062\003\036\006\031\040\061" +
    "\041\045\042\053\046\023\047\u0151\053\056\054\007\055" +
    "\020\056\050\057\010\060\052\061\030\062\021\063\014" +
    "\065\024\066\022\067\042\070\015\071\043\072\035\074" +
    "\046\102\034\001\002\000\040\004\uffb2\005\uffb2\006\uffb2" +
    "\007\uffb2\010\uffb2\011\uffb2\012\uffb2\022\uffb2\037\uffb2\043" +
    "\uffb2\044\uffb2\047\uffb2\052\uffb2\077\uffb2\100\uffb2\001\002" +
    "\000\006\015\344\047\u0153\001\002\000\066\002\uffd7\003" +
    "\uffd7\006\uffd7\015\uffd7\040\uffd7\041\uffd7\042\uffd7\046\uffd7" +
    "\047\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060" +
    "\uffd7\061\uffd7\062\uffd7\063\uffd7\065\uffd7\066\uffd7\067\uffd7" +
    "\070\uffd7\071\uffd7\072\uffd7\074\uffd7\102\uffd7\001\002\000" +
    "\012\006\u0155\053\056\054\007\074\046\001\002\000\014" +
    "\016\u0170\017\u0106\021\u0107\022\u0108\050\u010a\001\002\000" +
    "\004\006\u016e\001\002\000\034\004\075\005\072\006\102" +
    "\007\070\010\076\011\100\012\105\022\074\037\103\043" +
    "\071\044\104\077\101\100\073\001\002\000\034\004\075" +
    "\005\072\006\102\007\070\010\076\011\100\012\105\022" +
    "\074\037\103\043\071\044\104\077\101\100\073\001\002" +
    "\000\042\014\u015a\020\130\021\122\022\120\023\125\024" +
    "\132\025\121\026\124\027\126\030\123\031\115\032\131" +
    "\033\127\034\133\035\116\036\117\001\002\000\004\006" +
    "\u015b\001\002\000\010\017\u0161\021\u0162\022\u0163\001\002" +
    "\000\004\045\u015d\001\002\000\004\046\u015e\001\002\000" +
    "\060\003\036\006\031\040\061\041\045\042\053\046\023" +
    "\053\056\054\007\055\020\056\050\057\010\060\052\061" +
    "\030\062\021\063\014\065\024\066\022\067\042\070\015" +
    "\071\043\072\035\074\046\102\034\001\002\000\062\003" +
    "\036\006\031\040\061\041\045\042\053\046\023\047\u0160" +
    "\053\056\054\007\055\020\056\050\057\010\060\052\061" +
    "\030\062\021\063\014\065\024\066\022\067\042\070\015" +
    "\071\043\072\035\074\046\102\034\001\002\000\064\002" +
    "\uffc3\003\uffc3\006\uffc3\040\uffc3\041\uffc3\042\uffc3\046\uffc3" +
    "\047\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060" +
    "\uffc3\061\uffc3\062\uffc3\063\uffc3\065\uffc3\066\uffc3\067\uffc3" +
    "\070\uffc3\071\uffc3\072\uffc3\074\uffc3\102\uffc3\001\002\000" +
    "\034\004\075\005\072\006\102\007\070\010\076\011\100" +
    "\012\105\022\074\037\103\043\071\044\104\077\101\100" +
    "\073\001\002\000\004\021\u0165\001\002\000\004\022\u0164" +
    "\001\002\000\004\045\uffbd\001\002\000\004\045\uffbe\001" +
    "\002\000\042\020\130\021\122\022\120\023\125\024\132" +
    "\025\121\026\124\027\126\030\123\031\115\032\131\033" +
    "\127\034\133\035\116\036\117\045\uffbf\001\002\000\042" +
    "\014\u0168\020\130\021\122\022\120\023\125\024\132\025" +
    "\121\026\124\027\126\030\123\031\115\032\131\033\127" +
    "\034\133\035\116\036\117\001\002\000\004\006\u015b\001" +
    "\002\000\004\045\u016a\001\002\000\004\046\u016b\001\002" +
    "\000\060\003\036\006\031\040\061\041\045\042\053\046" +
    "\023\053\056\054\007\055\020\056\050\057\010\060\052" +
    "\061\030\062\021\063\014\065\024\066\022\067\042\070" +
    "\015\071\043\072\035\074\046\102\034\001\002\000\062" +
    "\003\036\006\031\040\061\041\045\042\053\046\023\047" +
    "\u016d\053\056\054\007\055\020\056\050\057\010\060\052" +
    "\061\030\062\021\063\014\065\024\066\022\067\042\070" +
    "\015\071\043\072\035\074\046\102\034\001\002\000\064" +
    "\002\uffc2\003\uffc2\006\uffc2\040\uffc2\041\uffc2\042\uffc2\046" +
    "\uffc2\047\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2" +
    "\060\uffc2\061\uffc2\062\uffc2\063\uffc2\065\uffc2\066\uffc2\067" +
    "\uffc2\070\uffc2\071\uffc2\072\uffc2\074\uffc2\102\uffc2\001\002" +
    "\000\004\013\u016f\001\002\000\014\055\020\056\050\057" +
    "\010\060\052\063\014\001\002\000\004\006\u0121\001\002" +
    "\000\034\004\075\005\072\006\102\007\070\010\076\011" +
    "\100\012\105\022\074\037\103\043\071\044\104\077\101" +
    "\100\073\001\002\000\042\020\130\021\122\022\120\023" +
    "\125\024\132\025\121\026\124\027\126\030\123\031\115" +
    "\032\131\033\127\034\133\035\116\036\117\045\u0173\001" +
    "\002\000\004\014\u0174\001\002\000\064\002\uffea\003\uffea" +
    "\006\uffea\040\uffea\041\uffea\042\uffea\046\uffea\047\uffea\053" +
    "\uffea\054\uffea\055\uffea\056\uffea\057\uffea\060\uffea\061\uffea" +
    "\062\uffea\063\uffea\065\uffea\066\uffea\067\uffea\070\uffea\071" +
    "\uffea\072\uffea\074\uffea\102\uffea\001\002\000\064\002\uffb0" +
    "\003\uffb0\006\uffb0\040\uffb0\041\uffb0\042\uffb0\046\uffb0\047" +
    "\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0" +
    "\061\uffb0\062\uffb0\063\uffb0\065\uffb0\066\uffb0\067\uffb0\070" +
    "\uffb0\071\uffb0\072\uffb0\074\uffb0\102\uffb0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0173\000\060\002\024\003\012\006\031\007\053\010" +
    "\010\011\040\012\026\013\032\014\011\016\056\017\003" +
    "\021\050\022\016\023\004\024\046\025\037\026\005\027" +
    "\025\030\036\031\057\032\015\036\054\037\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\054\006\064\007\053\010\010\011\040\012" +
    "\026\013\032\014\011\016\056\017\003\021\050\022\016" +
    "\023\004\024\046\025\037\026\005\027\025\030\036\031" +
    "\057\032\015\036\054\037\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\043\u0151\044\341\001\001\000\004\015\u013f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\u0101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\003\062\006\031\007\053\010\010\011\040\012" +
    "\026\013\032\014\011\016\056\017\003\021\050\022\016" +
    "\023\004\024\046\025\037\026\005\027\025\030\036\031" +
    "\057\032\015\036\054\037\043\001\001\000\054\006\064" +
    "\007\053\010\010\011\040\012\026\013\032\014\011\016" +
    "\056\017\003\021\050\022\016\023\004\024\046\025\037" +
    "\026\005\027\025\030\036\031\057\032\015\036\054\037" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\212\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\153\001\001\000\006\015\107\033" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\113\001\001\000\002\001\001\000\004" +
    "\015\151\001\001\000\004\015\150\001\001\000\004\015" +
    "\147\001\001\000\004\015\146\001\001\000\004\015\145" +
    "\001\001\000\004\015\144\001\001\000\004\015\143\001" +
    "\001\000\004\015\142\001\001\000\004\015\141\001\001" +
    "\000\004\015\140\001\001\000\004\015\137\001\001\000" +
    "\004\015\136\001\001\000\004\015\135\001\001\000\004" +
    "\015\134\001\001\000\004\015\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\165\015\164\001\001\000" +
    "\004\015\157\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\171\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\176\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\201\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\206\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\214\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\217\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\034\225\036\224\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\233\001\001\000\002\001\001\000\056\003\231\006\031" +
    "\007\053\010\010\011\040\012\026\013\032\014\011\016" +
    "\056\017\003\021\050\022\016\023\004\024\046\025\037" +
    "\026\005\027\025\030\036\031\057\032\015\036\054\037" +
    "\043\001\001\000\054\006\064\007\053\010\010\011\040" +
    "\012\026\013\032\014\011\016\056\017\003\021\050\022" +
    "\016\023\004\024\046\025\037\026\005\027\025\030\036" +
    "\031\057\032\015\036\054\037\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\003\237\006\031\007\053\010\010\011\040\012" +
    "\026\013\032\014\011\016\056\017\003\021\050\022\016" +
    "\023\004\024\046\025\037\026\005\027\025\030\036\031" +
    "\057\032\015\036\054\037\043\001\001\000\054\006\064" +
    "\007\053\010\010\011\040\012\026\013\032\014\011\016" +
    "\056\017\003\021\050\022\016\023\004\024\046\025\037" +
    "\026\005\027\025\030\036\031\057\032\015\036\054\037" +
    "\043\001\001\000\002\001\001\000\006\035\243\045\244" +
    "\001\001\000\002\001\001\000\004\045\246\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\255\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\257\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\271\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\003\274\006\031\007" +
    "\053\010\010\011\040\012\026\013\032\014\011\016\056" +
    "\017\003\021\050\022\016\023\004\024\046\025\037\026" +
    "\005\027\025\030\036\031\057\032\015\036\054\037\043" +
    "\001\001\000\054\006\064\007\053\010\010\011\040\012" +
    "\026\013\032\014\011\016\056\017\003\021\050\022\016" +
    "\023\004\024\046\025\037\026\005\027\025\030\036\031" +
    "\057\032\015\036\054\037\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\301\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\334" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\313\001\001\000\002\001\001\000\006\004" +
    "\316\015\315\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\321\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\326\015\315\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\331\015\315\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\043\342" +
    "\044\341\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\044\346\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\015\351\031" +
    "\352\037\350\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\034\360\036\224\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\003" +
    "\363\006\031\007\053\010\010\011\040\012\026\013\032" +
    "\014\011\016\056\017\003\021\050\022\016\023\004\024" +
    "\046\025\037\026\005\027\025\030\036\031\057\032\015" +
    "\036\054\037\043\001\001\000\054\006\064\007\053\010" +
    "\010\011\040\012\026\013\032\014\011\016\056\017\003" +
    "\021\050\022\016\023\004\024\046\025\037\026\005\027" +
    "\025\030\036\031\057\032\015\036\054\037\043\001\001" +
    "\000\002\001\001\000\056\003\366\006\031\007\053\010" +
    "\010\011\040\012\026\013\032\014\011\016\056\017\003" +
    "\021\050\022\016\023\004\024\046\025\037\026\005\027" +
    "\025\030\036\031\057\032\015\036\054\037\043\001\001" +
    "\000\054\006\064\007\053\010\010\011\040\012\026\013" +
    "\032\014\011\016\056\017\003\021\050\022\016\023\004" +
    "\024\046\025\037\026\005\027\025\030\036\031\057\032" +
    "\015\036\054\037\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\374\015\164\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\u011e\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\u0115\015\164\001\001\000\004" +
    "\015\u010a\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\u0113\001\001\000\004\015\u010e\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\u0111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\u0124\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\u0128\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\u012d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\u0131\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\u0134\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\003\u0137\006\031\007\053\010\010\011\040" +
    "\012\026\013\032\014\011\016\056\017\003\021\050\022" +
    "\016\023\004\024\046\025\037\026\005\027\025\030\036" +
    "\031\057\032\015\036\054\037\043\001\001\000\054\006" +
    "\064\007\053\010\010\011\040\012\026\013\032\014\011" +
    "\016\056\017\003\021\050\022\016\023\004\024\046\025" +
    "\037\026\005\027\025\030\036\031\057\032\015\036\054" +
    "\037\043\001\001\000\002\001\001\000\004\012\u013b\001" +
    "\001\000\056\003\u013c\006\031\007\053\010\010\011\040" +
    "\012\026\013\032\014\011\016\056\017\003\021\050\022" +
    "\016\023\004\024\046\025\037\026\005\027\025\030\036" +
    "\031\057\032\015\036\054\037\043\001\001\000\002\001" +
    "\001\000\054\006\064\007\053\010\010\011\040\012\026" +
    "\013\032\014\011\016\056\017\003\021\050\022\016\023" +
    "\004\024\046\025\037\026\005\027\025\030\036\031\057" +
    "\032\015\036\054\037\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\u0144\040\u0143" +
    "\041\u0142\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\u0144\041\u014a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\003\u0148\006\031\007" +
    "\053\010\010\011\040\012\026\013\032\014\011\016\056" +
    "\017\003\021\050\022\016\023\004\024\046\025\037\026" +
    "\005\027\025\030\036\031\057\032\015\036\054\037\043" +
    "\001\001\000\054\006\064\007\053\010\010\011\040\012" +
    "\026\013\032\014\011\016\056\017\003\021\050\022\016" +
    "\023\004\024\046\025\037\026\005\027\025\030\036\031" +
    "\057\032\015\036\054\037\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\003\u014f\006\031\007\053\010\010" +
    "\011\040\012\026\013\032\014\011\016\056\017\003\021" +
    "\050\022\016\023\004\024\046\025\037\026\005\027\025" +
    "\030\036\031\057\032\015\036\054\037\043\001\001\000" +
    "\054\006\064\007\053\010\010\011\040\012\026\013\032" +
    "\014\011\016\056\017\003\021\050\022\016\023\004\024" +
    "\046\025\037\026\005\027\025\030\036\031\057\032\015" +
    "\036\054\037\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\u0156\011\u0157\037\u0155" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\u0166\001\001\000\004\015\u0158\001\001\000\002\001\001" +
    "\000\004\020\u015b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\003\u015e\006\031\007\053" +
    "\010\010\011\040\012\026\013\032\014\011\016\056\017" +
    "\003\021\050\022\016\023\004\024\046\025\037\026\005" +
    "\027\025\030\036\031\057\032\015\036\054\037\043\001" +
    "\001\000\054\006\064\007\053\010\010\011\040\012\026" +
    "\013\032\014\011\016\056\017\003\021\050\022\016\023" +
    "\004\024\046\025\037\026\005\027\025\030\036\031\057" +
    "\032\015\036\054\037\043\001\001\000\002\001\001\000" +
    "\004\015\u0165\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\u0168\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\003\u016b\006\031\007\053\010" +
    "\010\011\040\012\026\013\032\014\011\016\056\017\003" +
    "\021\050\022\016\023\004\024\046\025\037\026\005\027" +
    "\025\030\036\031\057\032\015\036\054\037\043\001\001" +
    "\000\054\006\064\007\053\010\010\011\040\012\026\013" +
    "\032\014\011\016\056\017\003\021\050\022\016\023\004" +
    "\024\046\025\037\026\005\027\025\030\036\031\057\032" +
    "\015\036\054\037\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\301\001\001\000\002\001\001\000" +
    "\004\015\u0171\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public LinkedList<Errores> listaErrores = new LinkedList<>();

    public void syntax_error(Symbol s){

            listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error(Symbol s){

            listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= instrucciones 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a; RESULT.add(b);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= imprimir 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= declaracion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= modificacion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= sif 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= smatch 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= sfor 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= swhile 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= sbreak 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= sdowhile 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= scontinue 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= sreturn 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= metodo 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= sstartwith 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= sappend 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= sremove 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= sllamada 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= dstruct 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= insstruct 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion ::= error PUNTOYCOMA 
            {
              Instruccion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // imprimir ::= PRINTLN PARENTESIS_A expresion PARENTESIS_C PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new FuncPrint(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimir",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaracion ::= mutabilidad ID DOSPUNTOS tipos IGUAL expresion PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		TipoMutabilidad a = (TipoMutabilidad)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DeclaracionVar(b, d, a, c, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaracion ::= mutabilidad ID DOSPUNTOS tipos PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		TipoMutabilidad a = (TipoMutabilidad)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DeclaracionVar(b, null, a, c, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaracion ::= mutabilidad ID DOSPUNTOS tipos CORCHETE_A CORCHETE_C IGUAL CORCHETE_A listaexpresiones CORCHETE_C PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		TipoMutabilidad a = (TipoMutabilidad)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new DeclaracionArr(a, b, d, new LinkedList<LinkedList<Instruccion>>(), c, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaracion ::= mutabilidad ID DOSPUNTOS tipos CORCHETE_A CORCHETE_C CORCHETE_A CORCHETE_C IGUAL CORCHETE_A listaexp2D CORCHETE_C PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		TipoMutabilidad a = (TipoMutabilidad)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<LinkedList<Instruccion>> d = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new DeclaracionArr(a, b, new LinkedList<Instruccion>(), d, c, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaracion ::= LIST MENOR tipos MAYOR ID IGUAL NEW LIST PARENTESIS_A PARENTESIS_C PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		 RESULT = new DeclaracionLista(b, a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // modificacion ::= ID IGUAL expresion PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ModificacionVar(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // modificacion ::= ID CORCHETE_A expresion CORCHETE_C IGUAL expresion PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ModificacionArr(a, c, b, null, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // modificacion ::= ID CORCHETE_A expresion CORCHETE_C CORCHETE_A expresion CORCHETE_C IGUAL expresion PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ModificacionArr(a, d, b, c, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // modificacion ::= ID PUNTO ID IGUAL expresion PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ModificacionStruct(a, b, c, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // modificacion ::= ID PUNTO ID PUNTO ID IGUAL expresion PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ModificacionStruct(a, b, c, d, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // modificacion ::= ID SUMA SUMA PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new ModificacionVar(a, ModificadoresVar.AUMENTO, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // modificacion ::= ID MENOS MENOS PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new ModificacionVar(a, ModificadoresVar.DECREMENTO, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // metodo ::= VOID ID PARENTESIS_A params PARENTESIS_C LLAVE_A instrucciones LLAVE_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<HashMap> b = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Metodos(a, b, c, new Tipo(DatoNativo.VOID), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodo",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // metodo ::= VOID ID PARENTESIS_A PARENTESIS_C LLAVE_A instrucciones LLAVE_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Metodos(a, new LinkedList<HashMap>(), b, new Tipo(DatoNativo.VOID), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodo",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // metodo ::= tipos ID PARENTESIS_A params PARENTESIS_C LLAVE_A instrucciones LLAVE_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<HashMap> c = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FuncFunciones(b, d, c, a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodo",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // metodo ::= tipos ID PARENTESIS_A PARENTESIS_C LLAVE_A instrucciones LLAVE_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FuncFunciones(b, c, new LinkedList<HashMap>(), new Tipo(DatoNativo.VOID), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodo",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // dstruct ::= STRUCT LLAVE_A listastruct LLAVE_C ID PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DeclaracionStructs(b, a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dstruct",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // insstruct ::= mutabilidad ID DOSPUNTOS ID IGUAL LLAVE_A listavalstruct LLAVE_C PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		TipoMutabilidad a = (TipoMutabilidad)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		HashMap<String,Instruccion> d = (HashMap<String,Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new InstanciaStruct(c, b, d, a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("insstruct",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // insstruct ::= LLAVE_A listavalstruct LLAVE_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		HashMap<String,Instruccion> a = (HashMap<String,Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new InstanciaStruct(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("insstruct",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sstartwith ::= STARTWITH ID PARENTESIS_A listaparams PARENTESIS_C PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new StartWith(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sstartwith",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sstartwith ::= STARTWITH ID PARENTESIS_A PARENTESIS_C PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new StartWith(a, new LinkedList<Instruccion>(), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sstartwith",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sllamada ::= ID PARENTESIS_A listaparams PARENTESIS_C PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new FuncLlamada(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sllamada",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sllamada ::= ID PARENTESIS_A PARENTESIS_C PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new FuncLlamada(a, new LinkedList<Instruccion>(), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sllamada",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // listaparams ::= listaparams COMA expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaparams",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // listaparams ::= expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Instruccion>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaparams",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // listastruct ::= listastruct atribstruct PUNTOYCOMA 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		HashMap<String,Object> b = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listastruct",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // listastruct ::= atribstruct PUNTOYCOMA 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		HashMap<String,Object> a = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new LinkedList<HashMap>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listastruct",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // atribstruct ::= ID DOSPUNTOS tipos 
            {
              HashMap<String,Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new HashMap<String,Object>(); 
                                                   RESULT.put("id", a); 
                                                   RESULT.put("tipo", b); 
                                                   RESULT.put("valor", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribstruct",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // atribstruct ::= ID DOSPUNTOS ID 
            {
              HashMap<String,Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new HashMap<String,Object>();
                                                   RESULT.put("id", a); 
                                                   RESULT.put("tipo", b); 
                                                   RESULT.put("valor", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribstruct",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // listavalstruct ::= listavalstruct COMA valatribstruct 
            {
              HashMap<String,Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		HashMap<String,Instruccion> a = (HashMap<String,Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Instruccion> b = (HashMap<String,Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.putAll(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listavalstruct",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // listavalstruct ::= valatribstruct 
            {
              HashMap<String,Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HashMap<String,Instruccion> a = (HashMap<String,Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new HashMap<String,Instruccion>(); RESULT.putAll(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listavalstruct",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // valatribstruct ::= ID DOSPUNTOS expresion 
            {
              HashMap<String,Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new HashMap<String,Instruccion>(); RESULT.put(a.toString(), b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valatribstruct",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // valatribstruct ::= ID DOSPUNTOS insstruct 
            {
              HashMap<String,Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new HashMap<String,Instruccion>(); RESULT.put(a.toString(), b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valatribstruct",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // params ::= params COMA tipos ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; var hm = new HashMap<String, Object>(); hm.put("id", c); hm.put("tipo", b); RESULT.add(hm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // params ::= tipos ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<HashMap>(); var hm2 = new HashMap<String, Object>(); hm2.put("id", b); hm2.put("tipo", a); RESULT.add(hm2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sif ::= IF PARENTESIS_A expresion PARENTESIS_C LLAVE_A instrucciones LLAVE_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FuncIf(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sif",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sif ::= IF PARENTESIS_A expresion PARENTESIS_C LLAVE_A instrucciones LLAVE_C ELSE LLAVE_A instrucciones LLAVE_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FuncIf(a, b, c, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sif",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sif ::= IF PARENTESIS_A expresion PARENTESIS_C LLAVE_A instrucciones LLAVE_C ELSE sif 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FuncElseIf(a, c, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sif",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sfor ::= FOR PARENTESIS_A modificacion expresion PUNTOYCOMA act_for PARENTESIS_C LLAVE_A instrucciones LLAVE_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FuncFor(a, b, c, d, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sfor",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sfor ::= FOR PARENTESIS_A declaracion expresion PUNTOYCOMA act_for PARENTESIS_C LLAVE_A instrucciones LLAVE_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FuncFor(a, b, c, d, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sfor",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // swhile ::= WHILE PARENTESIS_A expresion PARENTESIS_C LLAVE_A instrucciones LLAVE_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FuncWhile(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("swhile",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sdowhile ::= DO LLAVE_A instrucciones LLAVE_C WHILE PARENTESIS_A expresion PARENTESIS_C PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new FuncDoWhile(b, a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sdowhile",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // act_for ::= ID IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ModificacionVar(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("act_for",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // act_for ::= ID SUMA SUMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new ModificacionVar(a, ModificadoresVar.AUMENTO, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("act_for",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // act_for ::= ID MENOS MENOS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new ModificacionVar(a, ModificadoresVar.DECREMENTO, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("act_for",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // smatch ::= MATCH expresion LLAVE_A casos LLAVE_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<CasosMatch> b = (LinkedList<CasosMatch>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FuncMatch(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("smatch",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sappend ::= ID PUNTO APPEND PARENTESIS_A expresion PARENTESIS_C PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new AppendLista(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sappend",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // listaexpresiones ::= listaexpresiones COMA expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaexpresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // listaexpresiones ::= expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaexpresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // listaexp2D ::= listaexp2D COMA CORCHETE_A listaexpresiones CORCHETE_C 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<LinkedList<Instruccion>> a = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaexp2D",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // listaexp2D ::= CORCHETE_A listaexpresiones CORCHETE_C 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaexp2D",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sremove ::= ID PUNTO REMOVE PARENTESIS_A expresion PARENTESIS_C PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new RemoveLista(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sremove",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // casos ::= casos caso 
            {
              LinkedList<CasosMatch> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<CasosMatch> a = (LinkedList<CasosMatch>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CasosMatch b = (CasosMatch)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casos",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // casos ::= caso 
            {
              LinkedList<CasosMatch> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CasosMatch a = (CasosMatch)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casos",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // caso ::= expresion IGUAL MAYOR LLAVE_A instrucciones LLAVE_C 
            {
              CasosMatch RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CasosMatch(a, b, true, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // caso ::= GUIONBAJO IGUAL MAYOR LLAVE_A instrucciones LLAVE_C 
            {
              CasosMatch RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CasosMatch(null, a, false, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sbreak ::= BREAK PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Break(aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sbreak",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // scontinue ::= CONTINUE PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Continue(aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("scontinue",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // sreturn ::= RETURN expresion PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Return(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sreturn",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sreturn ::= RETURN PUNTOYCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Return(null, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sreturn",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresion ::= MENOS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresion ::= NOT expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Logicas(a, OperadoresLogicos.NOT, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresion ::= PARENTESIS_A expresion PARENTESIS_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion ::= ID PARENTESIS_A listaparams PARENTESIS_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FuncLlamada(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion ::= ID PARENTESIS_A PARENTESIS_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new FuncLlamada(a, new LinkedList<Instruccion>(), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion ::= expresion MENOS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion ::= expresion SUMA expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresion ::= expresion POR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresion ::= expresion DIVISION expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresion ::= expresion POTENCIA expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresion ::= expresion MOD expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MODULO, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresion ::= expresion DOSIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUALACION, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresion ::= expresion DIFERENCIA expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.DIFERENCIA, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expresion ::= expresion MENOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MENORQUE, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresion ::= expresion MENORIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MENORIGUAL, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresion ::= expresion MAYOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYORQUE, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expresion ::= expresion MAYORIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYORIGUAL, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expresion ::= expresion OR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Logicas(a, b, OperadoresLogicos.OR, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expresion ::= expresion AND expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Logicas(a, b, OperadoresLogicos.AND, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expresion ::= expresion XOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Logicas(a, b, OperadoresLogicos.XOR, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expresion ::= PARENTESIS_A tiposCasteo PARENTESIS_C expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DatoNativo a = (DatoNativo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Casteo(b, a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expresion ::= ID PUNTO ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AccesoStruct(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expresion ::= ID PUNTO ID PUNTO ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AccesoStruct(a, b, c, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expresion ::= ID CORCHETE_A expresion CORCHETE_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AccesoVector(a, b, null, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expresion ::= ID CORCHETE_A expresion CORCHETE_C CORCHETE_A expresion CORCHETE_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AccesoVector(a, b, c, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expresion ::= ID PUNTO REMOVE PARENTESIS_A expresion PARENTESIS_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new RemoveLista(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expresion ::= TOSTRING PARENTESIS_A expresion PARENTESIS_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctoString(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expresion ::= ROUND PARENTESIS_A expresion PARENTESIS_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FuncRound(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expresion ::= LENGTH PARENTESIS_A expresion PARENTESIS_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FuncLength(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expresion ::= ID PUNTO FIND PARENTESIS_A expresion PARENTESIS_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FuncFind(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expresion ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Nativo(Integer.parseInt(a), new Tipo(DatoNativo.ENTERO), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expresion ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Nativo(new Double(a), new Tipo(DatoNativo.DECIMAL), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expresion ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Nativo(a, new Tipo(DatoNativo.CADENA), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expresion ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		char a = (char)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Nativo(a, new Tipo(DatoNativo.CARACTER), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expresion ::= TRUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Nativo(true, new Tipo(DatoNativo.BOOLEANO), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expresion ::= FALSE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Nativo(false, new Tipo(DatoNativo.BOOLEANO), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expresion ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AccesoVariable(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // tiposCasteo ::= INT 
            {
              DatoNativo RESULT =null;
		   RESULT=DatoNativo.ENTERO;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tiposCasteo",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // tiposCasteo ::= DOUBLE 
            {
              DatoNativo RESULT =null;
		   RESULT=DatoNativo.DECIMAL;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tiposCasteo",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // tiposCasteo ::= CHAR 
            {
              DatoNativo RESULT =null;
		   RESULT=DatoNativo.CARACTER;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tiposCasteo",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // tipos ::= INT 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(DatoNativo.ENTERO);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // tipos ::= DOUBLE 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(DatoNativo.DECIMAL);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // tipos ::= STRING 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(DatoNativo.CADENA);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // tipos ::= CHAR 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(DatoNativo.CARACTER);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // tipos ::= BOOLEANO 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(DatoNativo.BOOLEANO);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipos",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // mutabilidad ::= VAR 
            {
              TipoMutabilidad RESULT =null;
		   RESULT = TipoMutabilidad.VAR;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mutabilidad",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // mutabilidad ::= CONST 
            {
              TipoMutabilidad RESULT =null;
		   RESULT = TipoMutabilidad.CONST;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mutabilidad",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
